<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learn Blender Development</title>
    <description>A blog on scripting and extending of Blender.
</description>
    <link>http://thebusytypist.github.io/learnblenderdev-site/</link>
    <atom:link href="http://thebusytypist.github.io/learnblenderdev-site/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 01 Apr 2015 00:01:34 +0800</pubDate>
    <lastBuildDate>Wed, 01 Apr 2015 00:01:34 +0800</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>Plan next practice project</title>
        <description>&lt;p&gt;As my next practice project for learning Blender development,
I plan to write an operator
which generates mesh
for isosurfaces of an implicit function.
This is also called contouring.
Many techniques, such as
&lt;a href=&quot;http://en.wikipedia.org/wiki/Marching_cubes&quot;&gt;Marching Cubes&lt;/a&gt;
and
&lt;a href=&quot;http://www.frankpetterson.com/publications/dualcontour/dualcontour.pdf&quot;&gt;Dual Contouring&lt;/a&gt;,
can be used for this task. &lt;/p&gt;

&lt;p&gt;Currently I have only a very general idea for this project.
Some parts of it have not been designed.
For example,
questions like “how to input the implicit function to our operator?”
have not been answered.
If I choose to accept symbolic representation of those implicit function
I have to write a parser for that.
Or, I can use a fixed form of implicit function with some variable coefficients.
In this way the parsing can be really easy but we lose too much flexibility.
I think I need to consider these questions at a later time.&lt;/p&gt;

&lt;p&gt;In the comming post,
I will do an analysis on the operator
&lt;code&gt;MESH_OT_primitive_cube_add&lt;/code&gt;.
This operator illustrates many usefull informations
(such as the MVC model in Blender, the BMesh system, etc.) for me
to write my contouring operator.
More over, it is not involved with too much theoretical background
of the BMesh data structure, so I think it should be not hard to read.&lt;/p&gt;

&lt;p&gt;By looking closely at its source code
I expect following question to be answered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How is an object linked to the scene?&lt;/li&gt;
  &lt;li&gt;How is the mesh data(i.e. vertices, edges, faces) set?&lt;/li&gt;
  &lt;li&gt;How is the view get notified to update itself?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is all for today. See you in next post.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/03/30/plan-next-practice-project.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/03/30/plan-next-practice-project.html</guid>
        
        <category>blender-coding</category>
        
        
      </item>
    
      <item>
        <title>Add properties for operator</title>
        <description>&lt;p&gt;It is easy to define properties for an operator
and get values of those properties during the execution.
&lt;a href=&quot;http://wiki.blender.org/index.php/Dev:2.5/Source/Architecture/RNA&quot;&gt;This page&lt;/a&gt;
provides a detailed introduction for this task.
As a summary, you can just search for property definition functions
in the file &lt;code&gt;rna_define.h&lt;/code&gt;, and property access functions
in the file &lt;code&gt;rna_access.h&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I put an example
&lt;a href=&quot;https://github.com/thebusytypist/BlenderExtraOperators/tree/master/EchoProperties&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More than defining properties by their value types(&lt;code&gt;int&lt;/code&gt;s, &lt;code&gt;float&lt;/code&gt;s, &lt;code&gt;string&lt;/code&gt;s, etc.),
you can also assign a sub-type for a property.&lt;/p&gt;

&lt;p&gt;A sub-type can supply usefull informations for the editor’s user interface.
In the above example,
I assign a string property with a sub-type of &lt;code&gt;PROP_FILEPATH&lt;/code&gt;.
The &lt;code&gt;PROP_FILEPATH&lt;/code&gt; will make the UI add an extra file browse button
in addition to the widgets of a plain string property.&lt;/p&gt;

&lt;p&gt;In the file &lt;code&gt;rna_define.h&lt;/code&gt; Blender system provides many utilities
to define properties with sub-type.
For sub-type &lt;code&gt;PROP_FILEPATH&lt;/code&gt; I use &lt;code&gt;RNA_def_string_file_path&lt;/code&gt;.
Within this function you can see a call to &lt;code&gt;RNA_def_property&lt;/code&gt;
which indicates the sub-type for our property:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RNA_def_property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROP_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROP_FILEPATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Sat, 28 Mar 2015 19:56:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/03/28/add-properties-for-operator.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/03/28/add-properties-for-operator.html</guid>
        
        <category>blender-coding</category>
        
        <category>operator</category>
        
        
      </item>
    
      <item>
        <title>Write first Blender operator</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://wiki.blender.org/index.php/Dev:2.5/Source/Architecture/Operators/Tutorial&quot;&gt;This operator tutorial&lt;/a&gt;
covers almost all about Blender operator development.
I do not want to merely repeat that tutorial in this post.
Instead, I will discuss a general work flow of adding your own operator,
and try to provide a basic framework for Blender operators developing.&lt;/p&gt;

&lt;p&gt;In the following discus I will take my
&lt;a href=&quot;https://github.com/thebusytypist/BlenderExtraOperators/tree/master/Echo&quot;&gt;&lt;code&gt;Echo&lt;/code&gt;&lt;/a&gt;
operator as an example.&lt;/p&gt;

&lt;h1 id=&quot;the-life-of-a-blender-operator&quot;&gt;The life of a Blender operator&lt;/h1&gt;

&lt;h2 id=&quot;the-operator-template-wmoperatortype&quot;&gt;The operator “template” &lt;code&gt;wmOperatorType&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Have a look at our &lt;code&gt;Echo&lt;/code&gt; operator:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;echo_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wmOperator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BKE_reportf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RPT_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;Operator %s is invoked.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPERATOR_FINISHED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EXTRA_OT_echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wmOperatorType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Echo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Echo operator invocation&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;EXTRA_OT_echo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTYPE_REGISTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You may have already noticed that a &lt;code&gt;wmOperatorType&lt;/code&gt; is used
while you are writing operator registration function;
but a &lt;code&gt;wmOperator&lt;/code&gt; is used
while you are implementing an operator’s execution function.&lt;/p&gt;

&lt;p&gt;The difference between &lt;code&gt;wmOperatorType&lt;/code&gt; and &lt;code&gt;wmOperator&lt;/code&gt;
is in that the former one has only static information,
such as &lt;code&gt;idname&lt;/code&gt;(which will be used as a key for operator finding),
and operator description for GUI display.
While the &lt;code&gt;wmOperator&lt;/code&gt; is a runtime thing and may contain runtime data.&lt;/p&gt;

&lt;p&gt;I prefer to call &lt;code&gt;wmOperator&lt;/code&gt; an operator instance since
it is instantiated from the operator template, &lt;code&gt;wmOperatorType&lt;/code&gt;.
And several operator instances of same type share their static information
in a single operator template.&lt;/p&gt;

&lt;p&gt;When Blender starts, only operator templates are created.
This is the time your operator registration function(&lt;code&gt;EXTRA_OT_echo&lt;/code&gt;) happens.&lt;/p&gt;

&lt;p&gt;The call stack looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blender-app.exe!EXTRA_OT_echo(wmOperatorType * ot) Line 17
blender-app.exe!WM_operatortype_append(void (wmOperatorType *) * opfunc) Line 175
blender-app.exe!ED_operatortypes_extra() Line 5
blender-app.exe!ED_spacetypes_init() Line 130
blender-app.exe!WM_init(bContext * C, int argc, const unsigned char * * argv) Line 159
blender-app.exe!main(int argc, const unsigned char * * UNUSED_argv_c) Line 1767
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jump to the frame which contains the call &lt;code&gt;ED_spacetypes_init&lt;/code&gt;
then you can find all other operators are also registered there.&lt;/p&gt;

&lt;h2 id=&quot;operator-invocation-and-execution&quot;&gt;Operator invocation and execution&lt;/h2&gt;

&lt;p&gt;When you launch an operator
(e.g. hit space key and execute an operator from the pop-up panel),
an operator instance is created.&lt;/p&gt;

&lt;p&gt;The operator instantiation happens in
function &lt;code&gt;wm_operator_create&lt;/code&gt;(file &lt;code&gt;wm_event_system.c&lt;/code&gt;),
which is called by &lt;code&gt;wm_operator_invoke&lt;/code&gt;(file &lt;code&gt;wm_event_system.c&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I list a partial call stack here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blender-app.exe!echo_exec(bContext * C, wmOperator * op) Line 11
blender-app.exe!wm_operator_invoke(bContext * C, wmOperatorType * ot, wmEvent * event, PointerRNA * properties, ReportList * reports, const bool poll_only) Line 1048
blender-app.exe!wm_operator_call_internal(bContext * C, wmOperatorType * ot, PointerRNA * properties, ReportList * reports, const short context, const bool poll_only) Line 1263
blender-app.exe!WM_operator_name_call_ptr(bContext * C, wmOperatorType * ot, short context, PointerRNA * properties) Line 1275
blender-app.exe!operator_call_cb(bContext * C, void * UNUSED_arg1, void * arg2) Line 3268
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the instantiation, &lt;code&gt;wm_operator_invoke&lt;/code&gt; continues and executes
the operator by calling the function which we had registered through
&lt;code&gt;wmOperatorType::exec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now most work of an operator has been finished.
We may revisit these functions later
for some advanced topics like redo/undo stack, modal operator, etc.&lt;/p&gt;

&lt;h2 id=&quot;finalization&quot;&gt;Finalization&lt;/h2&gt;

&lt;p&gt;For an operator instance returns &lt;code&gt;OPERATOR_FINISHED&lt;/code&gt;,
it will be added to a queue of window manager,
rather than destroyed immediately.&lt;/p&gt;

&lt;p&gt;You can trace this process from following call stack:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blender-app.exe!wm_operator_register(bContext * C, wmOperator * op) Line 154
blender-app.exe!wm_operator_finished(bContext * C, wmOperator * op, const bool repeat) Line 697
blender-app.exe!wm_operator_invoke(bContext * C, wmOperatorType * ot, wmEvent * event, PointerRNA * properties, ReportList * reports, const bool poll_only) Line 1073
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the function &lt;code&gt;wm_operator_register&lt;/code&gt;(file &lt;code&gt;wm.c&lt;/code&gt;)
there is call to &lt;code&gt;BLI_addtail(&amp;amp;wm-&amp;gt;operators, op);&lt;/code&gt;
to save the last operator instance.&lt;/p&gt;

&lt;p&gt;And those saved operators in &lt;code&gt;wm-&amp;gt;operators&lt;/code&gt; can be called from a redo,
which is in function &lt;code&gt;WM_operator_last_redo&lt;/code&gt;(file &lt;code&gt;wm_operators.c&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTYPE_REGISTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTYPE_UNDO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For our &lt;code&gt;Echo&lt;/code&gt; operator, which does not have an undo flag,
it will not be active during a redo action.&lt;/p&gt;

&lt;h1 id=&quot;build-blender-with-your-operator&quot;&gt;Build Blender with your operator&lt;/h1&gt;

&lt;p&gt;To include your operator in Blender system,
you have to do following things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Tell the build script to include your operator sources/headers.
You can achieve this by adding an &lt;code&gt;add_subdirectory&lt;/code&gt; in the &lt;code&gt;CMakeLists.txt&lt;/code&gt;
which resides in the directory &lt;code&gt;blender/source/blender/editors&lt;/code&gt;.
You need to call CMake macro &lt;code&gt;blender_add_lib&lt;/code&gt; to
ask the build system to generate a library target for you.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Link the Blender system with your operator library.
You need to add your library name into
CMake variable &lt;code&gt;BLENDER_SORTED_LIBS&lt;/code&gt;
from the file &lt;code&gt;blender/build_files/cmake/macros.cmake&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;blender-extra-operator-framework&quot;&gt;Blender extra operator framework&lt;/h1&gt;

&lt;p&gt;I think it would be tedious to add custom operators
to build system manually every time.
So I start a project to make this process more elegant:
&lt;a href=&quot;https://github.com/thebusytypist/BlenderExtraOperators&quot;&gt;BlenderExtraOperators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You need to apply a patch on Blender’s source only once.
Then all your extra operators can be &lt;em&gt;automatically&lt;/em&gt; added into Blender system.&lt;/p&gt;

&lt;p&gt;More than that, by using &lt;code&gt;BlenderExtraOperators&lt;/code&gt; framework,
you can maintain your operator source out of the Blender directory.
(This is like very much
what &lt;code&gt;clang&lt;/code&gt; project does to its extension &lt;code&gt;clang-tools-extra&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;I hope this project also helps your Blender operator development.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/03/28/write-first-blender-operator.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/03/28/write-first-blender-operator.html</guid>
        
        <category>blender-coding</category>
        
        <category>operator</category>
        
        
      </item>
    
      <item>
        <title>Tips on tracing Blender system</title>
        <description>&lt;p&gt;As a beginner in Blender development
I usually want to find the corresponding source code
of one piece of Blender Python script,
and then learn the mechanism behind the Blender system.&lt;/p&gt;

&lt;p&gt;For normal operator invocation
you can search the operator name in the source code.
And set a break point in the operator registration or invocation function.&lt;/p&gt;

&lt;p&gt;Let us take &lt;code&gt;bpy.ops.mesh.primitive_cube_add&lt;/code&gt; as an example.
You do a solution-wide search of &lt;code&gt;primitive_cube_add&lt;/code&gt;,
the you can find the function &lt;code&gt;MESH_OT_primitive_cube_add&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MESH_OT_primitive_cube_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wmOperatorType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* identifiers */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Add Cube&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Construct a cube mesh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;MESH_OT_primitive_cube_add&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* api callbacks */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_primitive_cube_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ED_operator_scene_editable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* flags */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTYPE_REGISTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTYPE_UNDO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ED_object_add_unit_props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ED_object_add_generic_props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the registration function of the operator.
Some meta information is given here.
When an operator is going to be invoked(in &lt;code&gt;wm_operator_invoke&lt;/code&gt;),
a factory(&lt;code&gt;wm_operator_create&lt;/code&gt;)
will instantiate the real operator instance(&lt;code&gt;wmOperator&lt;/code&gt;)
and actual operator code happens in the function
&lt;code&gt;add_primitive_cube_exec&lt;/code&gt;,
which is registered by
&lt;code&gt;ot-&amp;gt;exec = add_primitive_cube_exec;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But what if one is looking for the detail implementation of
general script expressions, such as what I do in
&lt;a href=&quot;http://blender.stackexchange.com/a/27401/2355&quot;&gt;this answer&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Let us take the field accessing, such as &lt;code&gt;scene.active&lt;/code&gt;, for an example.&lt;/p&gt;

&lt;p&gt;Firstly the field name &lt;code&gt;active&lt;/code&gt;
must be referred in the C source code for reflection.
So we can search &lt;code&gt;&quot;active&quot;&lt;/code&gt; in the source code.
This will give a lot of matched results.&lt;/p&gt;

&lt;p&gt;Among these matches, we are interested in the &lt;code&gt;scene&lt;/code&gt; object,
which is the object we will search the field from.
So we look for the related matches containing a word &lt;code&gt;scene&lt;/code&gt;.
This will narrow down the search results to only one match:
the one in the file &lt;code&gt;source/blender/makesrna/intern/rna_scene_gen.c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The code looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;PointerPropertyRNA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rna_SceneObjects_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PropertyRNA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rna_SceneObjects_rna_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;active&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;41943041&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Active Object&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;Active object for this scene&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PROP_POINTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROP_NONE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROP_UNIT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;67567616&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SceneObjects_active_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SceneObjects_active_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RNA_Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you can add a break point in function &lt;code&gt;SceneObjects_active_set&lt;/code&gt;
to trace what happens if I set an active object.&lt;/p&gt;

&lt;p&gt;Finally, here is an extra minor tip.&lt;/p&gt;

&lt;p&gt;Sometimes I do not want to open Blender GUI
during tracing
if there is not much interactive operations.
For this case I usually write a script
and
automatically execute the operations in Blender background mode(headless mode).
You can achieve this
by setting command arguments to &lt;code&gt;-b -P script.py&lt;/code&gt; if you are using Visual C++.&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/03/20/tips-on-tracing-blender-system.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/03/20/tips-on-tracing-blender-system.html</guid>
        
        <category>blender-coding</category>
        
        
      </item>
    
      <item>
        <title>Use Blender as Python module</title>
        <description>&lt;p&gt;I have my &lt;code&gt;bpy&lt;/code&gt; module work today by following the directions of
&lt;a href=&quot;http://wiki.blender.org/index.php/User:Ideasman42/BlenderAsPyModule&quot;&gt;BlenderAsPyModule&lt;/a&gt;.
The only difference is in that
I do not copy &lt;code&gt;*.dll&lt;/code&gt; and &lt;code&gt;bpy.pyd&lt;/code&gt; files to &lt;code&gt;site-packages&lt;/code&gt;.
Instead, I set environment variable &lt;code&gt;PATH&lt;/code&gt; pointing to those &lt;code&gt;*.dll&lt;/code&gt;s
and set &lt;code&gt;sys.path&lt;/code&gt; pointing to &lt;code&gt;bpy.pyd&lt;/code&gt;.
However, 
a copy of &lt;code&gt;bin/&amp;lt;blender-version&amp;gt;&lt;/code&gt; in the Python’s root directory
seems inevitable.&lt;/p&gt;

&lt;p&gt;Note that the architecture of Python and &lt;code&gt;bpy&lt;/code&gt; module should be matched.
That is, you cannot imported an x86-64 build of &lt;code&gt;bpy&lt;/code&gt; module
in an x86 version of Python.
Otherwise you would get a “DLL load failed” error.&lt;/p&gt;

&lt;p&gt;There is also a minor building error in the revision of Blender I used
(&lt;code&gt;ff1ed872d93b5c40f1de599d79084d48f213921d&lt;/code&gt;, x86-64 build).
I have to add header path for &lt;code&gt;utfconv.h&lt;/code&gt;
and add definition of &lt;code&gt;WITH_INPUT_IME&lt;/code&gt; manually
to the project &lt;code&gt;bf_intern_ghost&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/03/19/blender-as-module.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/03/19/blender-as-module.html</guid>
        
        <category>blender-scripting</category>
        
        
      </item>
    
  </channel>
</rss>
