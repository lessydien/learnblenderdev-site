<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learn Blender Development</title>
    <description>A blog on scripting and extending of Blender.
</description>
    <link>http://thebusytypist.github.io/learnblenderdev-site/</link>
    <atom:link href="http://thebusytypist.github.io/learnblenderdev-site/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 22 Mar 2015 00:00:55 +0800</pubDate>
    <lastBuildDate>Sun, 22 Mar 2015 00:00:55 +0800</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>Tips on tracing Blender system</title>
        <description>&lt;p&gt;As a beginner in Blender development
I usually want to find the corresponding source code
of one piece of Blender Python script,
and then learn the mechanism behind the Blender system.&lt;/p&gt;

&lt;p&gt;For normal operator invocation
you can search the operator name in the source code.
And set a break point in the operator registration or invocation function.&lt;/p&gt;

&lt;p&gt;Let us take &lt;code&gt;bpy.ops.mesh.primitive_cube_add&lt;/code&gt; as an example.
You do a solution-wide search of &lt;code&gt;primitive_cube_add&lt;/code&gt;,
the you can find the function &lt;code&gt;MESH_OT_primitive_cube_add&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MESH_OT_primitive_cube_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wmOperatorType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* identifiers */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Add Cube&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Construct a cube mesh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;MESH_OT_primitive_cube_add&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* api callbacks */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_primitive_cube_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ED_operator_scene_editable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* flags */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTYPE_REGISTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTYPE_UNDO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ED_object_add_unit_props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ED_object_add_generic_props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the registration function of the operator.
Some meta information is given here.
When an operator is going to be invoked(in &lt;code&gt;wm_operator_invoke&lt;/code&gt;),
a factory(&lt;code&gt;wm_operator_create&lt;/code&gt;)
will instantiate the real operator instance(&lt;code&gt;wmOperator&lt;/code&gt;)
and actual operator code happens in the function
&lt;code&gt;add_primitive_cube_exec&lt;/code&gt;,
which is registered by
&lt;code&gt;ot-&amp;gt;exec = add_primitive_cube_exec;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But what if one is looking for the detail implementation of
general script expressions, such as what I do in
&lt;a href=&quot;http://blender.stackexchange.com/a/27401/2355&quot;&gt;this answer&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Let us take the field accessing, such as &lt;code&gt;scene.active&lt;/code&gt;, for an example.&lt;/p&gt;

&lt;p&gt;Firstly the field name &lt;code&gt;active&lt;/code&gt;
must be referred in the C source code for reflection.
So we can search &lt;code&gt;&quot;active&quot;&lt;/code&gt; in the source code.
This will give a lot of matched results.&lt;/p&gt;

&lt;p&gt;Among these matches, we are interested in the &lt;code&gt;scene&lt;/code&gt; object,
which is the object we will search the field from.
So we look for the related matches containing a word &lt;code&gt;scene&lt;/code&gt;.
This will narrow down the search results to only one match:
the one in the file &lt;code&gt;source/blender/makesrna/intern/rna_scene_gen.c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The code looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;PointerPropertyRNA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rna_SceneObjects_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PropertyRNA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rna_SceneObjects_rna_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;active&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;41943041&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Active Object&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;Active object for this scene&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PROP_POINTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROP_NONE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROP_UNIT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;67567616&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SceneObjects_active_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SceneObjects_active_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RNA_Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you can add a break point in function &lt;code&gt;SceneObjects_active_set&lt;/code&gt;
to trace what happens if I set an active object.&lt;/p&gt;

&lt;p&gt;Finally, here is an extra minor tip.&lt;/p&gt;

&lt;p&gt;Sometimes I do not want to open Blender GUI
during tracing
if there is not much interactive operations.
For this case I usually write a script
and
automatically execute the operations in Blender background mode(headless mode).
You can achieve this
by setting command arguments to &lt;code&gt;-b -P script.py&lt;/code&gt; if you are using Visual C++.&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/03/20/tips-on-tracing-blender-system.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/03/20/tips-on-tracing-blender-system.html</guid>
        
        <category>blender-coding</category>
        
        
      </item>
    
      <item>
        <title>Use Blender as Python module</title>
        <description>&lt;p&gt;I have my &lt;code&gt;bpy&lt;/code&gt; module work today by following the directions of
&lt;a href=&quot;http://wiki.blender.org/index.php/User:Ideasman42/BlenderAsPyModule&quot;&gt;BlenderAsPyModule&lt;/a&gt;.
The only difference is in that
I do not copy &lt;code&gt;*.dll&lt;/code&gt; and &lt;code&gt;bpy.pyd&lt;/code&gt; files to &lt;code&gt;site-packages&lt;/code&gt;.
Instead, I set environment variable &lt;code&gt;PATH&lt;/code&gt; pointing to those &lt;code&gt;*.dll&lt;/code&gt;s
and set &lt;code&gt;sys.path&lt;/code&gt; pointing to &lt;code&gt;bpy.pyd&lt;/code&gt;.
However, 
a copy of &lt;code&gt;bin/&amp;lt;blender-version&amp;gt;&lt;/code&gt; in the Python’s root directory
seems inevitable.&lt;/p&gt;

&lt;p&gt;Note that the architecture of Python and &lt;code&gt;bpy&lt;/code&gt; module should be matched.
That is, you cannot imported an x86-64 build of &lt;code&gt;bpy&lt;/code&gt; module
in an x86 version of Python.
Otherwise you would get a “DLL load failed” error.&lt;/p&gt;

&lt;p&gt;There is also a minor building error in the revision of Blender I used
(&lt;code&gt;ff1ed872d93b5c40f1de599d79084d48f213921d&lt;/code&gt;, x86-64 build).
I have to add header path for &lt;code&gt;utfconv.h&lt;/code&gt;
and add definition of &lt;code&gt;WITH_INPUT_IME&lt;/code&gt; manually
to the project &lt;code&gt;bf_intern_ghost&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/03/19/blender-as-module.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/03/19/blender-as-module.html</guid>
        
        <category>blender-scripting</category>
        
        
      </item>
    
  </channel>
</rss>
