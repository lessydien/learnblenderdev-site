<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learn Blender Development</title>
    <description>A blog on scripting and extending of Blender.
</description>
    <link>http://thebusytypist.github.io/learnblenderdev-site/</link>
    <atom:link href="http://thebusytypist.github.io/learnblenderdev-site/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 16 Jul 2015 20:37:18 +0800</pubDate>
    <lastBuildDate>Thu, 16 Jul 2015 20:37:18 +0800</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>2D dual contouring in Blender script</title>
        <description>&lt;p&gt;After a long break I begin to implement 2D dual contouring today.
This is the result I achieved:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/heart-function-2d-dc.png&quot; alt=&quot;2D dual contouring of heart function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My implementation is based on
&lt;a href=&quot;http://www.frankpetterson.com/publications/dualcontour/dualcontour.pdf&quot;&gt;Dual Contouring of Hermite Data&lt;/a&gt;
and
&lt;a href=&quot;http://www.cs.berkeley.edu/~jrs/meshpapers/SchaeferWarren2.pdf&quot;&gt;Dual Contouring: “The Secret Sauce”&lt;/a&gt;.
The source code of this tool can be found
&lt;a href=&quot;https://gist.github.com/thebusytypist/1d1c9db590670def874e&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can edit the &lt;code&gt;Function&lt;/code&gt; parameter to contour other kinds of geometry.
The input of &lt;code&gt;Function&lt;/code&gt; parameter should be a 2D distance field function.
Its zero isopleth will be contoured. 
You may find &lt;a href=&quot;http://iquilezles.org/www/articles/distfunctions/distfunctions.htm&quot;&gt;this page&lt;/a&gt; useful.&lt;/p&gt;

&lt;p&gt;There are also some details worth noting.
I use &lt;code&gt;numpy.linalg.pinv&lt;/code&gt; to solve linear system.
According to numpy’s document, &lt;code&gt;pinv&lt;/code&gt; computes the Moore-Penrose pseudo-inverse of a matrix.
Hence when we are given a linear system which is rank deficient,
the solution is minimized to the origin.
This may lead to a vertex outside its bounding square.
In this implementation I use the mass point translation approach to resolve this problem.&lt;/p&gt;

&lt;p&gt;This tool is tested on some simple cases and most of them works well.
But there is a problem when the isopleth hits the grid point.
In this case the common intersection point will be used by four adjacent squares
and then have four vertices generated.
This makes the shape’s topology incorrect.
A slight displacement may alleviate this problem.
But I am looking for a more robust solution.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/07/16/bpy-2d-dual-contouring.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/07/16/bpy-2d-dual-contouring.html</guid>
        
        <category>blender-scripting</category>
        
        
      </item>
    
      <item>
        <title>Construct BMesh from Mesh</title>
        <description>&lt;p&gt;(&lt;strong&gt;WARNING&lt;/strong&gt;
The implementation of this operator
is based on an inspection of Blender source code.
It just works but does not reflect
the suggested usage from the design.)&lt;/p&gt;

&lt;p&gt;In this post I will take an experiment
on generating mesh dynamically in Blender.&lt;/p&gt;

&lt;p&gt;As I said in the &lt;a href=&quot;/learnblenderdev-site/2015/04/01/analyze-primitive-cube-add-operator.html&quot;&gt;previous post&lt;/a&gt;
there are two possible approaches to generate mesh data dynamically.
One is to add a new BMesh operator which is similar to &lt;code&gt;create_cube&lt;/code&gt;.
The other is
to construct a &lt;code&gt;Mesh&lt;/code&gt;(defined in the file &lt;code&gt;DNA_mesh_types.h&lt;/code&gt;) first
and apply the BMesh operator &lt;code&gt;mesh_to_bmesh&lt;/code&gt;.
I will try the later one today.&lt;/p&gt;

&lt;p&gt;The major problem of this project is how to construct a &lt;code&gt;Mesh&lt;/code&gt;.
More concretely, you have to search for functions
which can be used as tools to construct a &lt;code&gt;Mesh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are familiar with the &lt;a href=&quot;http://wiki.blender.org/index.php/Dev:2.5/Doc/Blender_Source/Files_structure&quot;&gt;directory structure&lt;/a&gt; of Blender,
you would probably make a correct guess that those &lt;code&gt;Mesh&lt;/code&gt; related functions
should be in &lt;code&gt;blender/source/blender/editors/&lt;/code&gt;(The answer is &lt;code&gt;ED_mesh.h&lt;/code&gt;).
But you still have to spend time on making sure your way of
applying those functions is correct,
that is, you should provide the correct preconditions for every call.&lt;/p&gt;

&lt;p&gt;Instead of the above approach,
I introduce you a way to learn how to construct a &lt;code&gt;Mesh&lt;/code&gt;
by using Blender’s Python API.&lt;/p&gt;

&lt;p&gt;Let us get started.&lt;/p&gt;

&lt;p&gt;I assume you are familiar of how to achieve this using Python API:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meshes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;MyMesh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;faces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_pydata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The most important function is &lt;code&gt;from_pydata&lt;/code&gt;.
This function fills the mesh data and build the topology for a mesh.
You can find the implementation of this function
in file &lt;code&gt;bpy_types.py&lt;/code&gt;(directory &lt;code&gt;blender/release/scripts/modules&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I put an excerpt of its source code below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polygons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;vertices_flat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreach_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;co&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices_flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices_flat&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;edges_flat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreach_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vertices&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges_flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges_flat&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# this is different in bmesh&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loop_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polygons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loop_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop_index&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop_len&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loop_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop_len&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# if no edges - calculate them&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faces&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calc_edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All functions called above is implemented in C.
By applying tracing techniques I introduced in
&lt;a href=&quot;/learnblenderdev-site/2015/03/20/tips-on-tracing-blender-system.html&quot;&gt;this post&lt;/a&gt;
(Hint: search &lt;code&gt;&quot;add&quot;&lt;/code&gt;, &lt;code&gt;&quot;loop_start&quot;&lt;/code&gt; in the source code.
Be sure to include the double quotes while searching
since we are interested in the reflection code with those words),
we can collect all of the information we need to construct a &lt;code&gt;Mesh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After that, the remains are simple.&lt;/p&gt;

&lt;p&gt;To call a BMesh operator, according our
&lt;a href=&quot;/learnblenderdev-site/2015/04/01/analyze-primitive-cube-add-operator.html&quot;&gt;analysis&lt;/a&gt;
on BMesh system,
you can find the operator name and parameters in &lt;code&gt;bmo_opdefines&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also do not forget to link the newly created object to the scene,
and trigger a notification.&lt;/p&gt;

&lt;p&gt;I upload all source code of this experiment
&lt;a href=&quot;https://github.com/thebusytypist/BlenderExtraOperators/tree/master/CreateBMeshFromMesh&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next post I will write some real code on the contouring algorithm.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Apr 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/04/05/construct-bmesh-from-mesh.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/04/05/construct-bmesh-from-mesh.html</guid>
        
        <category>blender-coding</category>
        
        <category>operator</category>
        
        
      </item>
    
      <item>
        <title>Analyze the cube adding operator</title>
        <description>&lt;p&gt;(The revision of Blender used for analysis is
&lt;code&gt;bacdfc70e2109711eeecef122cf408e6803990ca&lt;/code&gt;)&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I assume you have already used “cube adding” before
(By pressing &lt;code&gt;Shift + A&lt;/code&gt;, and choosing the &lt;code&gt;Cube&lt;/code&gt; item in the &lt;code&gt;Mesh&lt;/code&gt; sub-menu).
And from previous posts we are already familiar with
the operator registration process.
So in this post, I will focus on the execution of this operator,
i.e. the function &lt;code&gt;add_primitive_cube_exec&lt;/code&gt;(file &lt;code&gt;editmesh_add.c&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In the following sections,
we will have a look at the operator from the view of MVC pattern first.
Then we dive into the BMesh system to see how the actual mesh data is constructed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; There is also a summary section in the end for you if you just want to see which functions are required for writing your own operators.&lt;/p&gt;

&lt;h2 id=&quot;the-mvc-pattern-in-blender&quot;&gt;The MVC pattern in Blender&lt;/h2&gt;
&lt;p&gt;Speaking with the theory of &lt;a href=&quot;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC&lt;/a&gt; pattern,
a successfully executed action usually experiences following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;When a user triggers some events,
the controller translates those raw events into a series of commands,
which can be understood by the model.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the model receives the commands from controller,
it will modify itself according to those commands.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After the model finished the modification(or some progress has been made),
it notifies the view for an (visual)update for user.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let us see how are these MVC concepts implemented in Blender.&lt;/p&gt;

&lt;p&gt;The controller part is simple in this case.
The clicking on menu item can be directly translated to the commands for models.
I will discuss the controller later
in more depth for those complicated cases(i.e. the modal operator).&lt;/p&gt;

&lt;p&gt;The view part of Blender
involves with how to represent models in graphic API draw calls.
I do not want to spend much time on this for now.
Actually we rarely need to touch this layer for writing operators.&lt;/p&gt;

&lt;p&gt;The model part is today’s main topic.
In Blender, 3D objects, such as meshes, lights, cameras,
are managed under a &lt;em&gt;scene&lt;/em&gt; object.
For every object in the scene, there is data with specific type stored
in it.
In our case, the cube we are going to create is
an object containing mesh data.
Now the whole process is clear: we create an object first,
then link it to the scene,
and finally fill mesh data into it.&lt;/p&gt;

&lt;p&gt;The object creation takes place in function &lt;code&gt;ED_object_add_type&lt;/code&gt;(file &lt;code&gt;editmesh_add.c&lt;/code&gt;).
And the function &lt;code&gt;BKE_object_add&lt;/code&gt; links the newly created object to the scene.
The trace of object linking is shown below(the latest function invocation comes first):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ED_object_add_type(bContext * C, int type, const float * loc, const float * rot, bool enter_editmode, unsigned int layer) Line 409
make_prim_init(bContext * C, const unsigned char * idname, float * dia, float[4] * mat, bool * was_editmode, const float * loc, const float * rot, const unsigned int layer) Line 65
add_primitive_cube_exec(bContext * C, wmOperator * op) Line 155
wm_operator_invoke(bContext * C, wmOperatorType * ot, wmEvent * event, PointerRNA * properties, ReportList * reports, const bool poll_only) Line 1048
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While the object with mesh data is being created, the model send notifications to the view using function &lt;code&gt;WM_event_add_notifier&lt;/code&gt;(defined in file &lt;code&gt;wm_event_system.c&lt;/code&gt;).
There will be multiple notifications for different objects during the operator execution. 
One of them is for the scene, and that notification is sent from &lt;code&gt;make_prim_init&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;WM_event_add_notifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NC_SCENE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ND_LAYER_CONTENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The abbreviation &lt;code&gt;NC&lt;/code&gt; in &lt;code&gt;NC_SCENE&lt;/code&gt; means “notification category”,
and the &lt;code&gt;ND&lt;/code&gt; in &lt;code&gt;ND_LAYER_CONTENT&lt;/code&gt; stands for “notification data”.
All of these enumerator definitions can be found in the file &lt;code&gt;WM_types.h&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another notification is for the newly created object, and that is sent from &lt;code&gt;make_prim_finish&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;WM_event_add_notifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NC_OBJECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ND_DRAW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obedit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I list the call stack of this notification from &lt;code&gt;make_prim_finish&lt;/code&gt; below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WM_event_add_notifier(const bContext * C, unsigned int type, void * reference) Line 164
make_prim_finish(bContext * C, Object * obedit, bool was_editmode, int enter_editmode) Line 96
add_primitive_cube_exec(bContext * C, wmOperator * op) Line 167
wm_operator_invoke(bContext * C, wmOperatorType * ot, wmEvent * event, PointerRNA * properties, ReportList * reports, const bool poll_only) Line 1048
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This then finishes the execution of cube adding operator.&lt;/p&gt;

&lt;p&gt;Let me remind you that there are also many other interesting things
in &lt;code&gt;add_primitive_cube_exec&lt;/code&gt; but I did not mention them.
To name a few of them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Operator properties access in &lt;code&gt;ED_object_add_generic_get_opts&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Editing mode toggling. The &lt;code&gt;ED_object_editmode_enter&lt;/code&gt;(called in &lt;code&gt;make_prim_init&lt;/code&gt;)
and &lt;code&gt;ED_object_editmode_exit&lt;/code&gt;(called in &lt;code&gt;make_prim_finish&lt;/code&gt;) are used.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dependency graph. In &lt;code&gt;ED_object_add_type&lt;/code&gt;
I saw some functions with prefix &lt;code&gt;DAG_&lt;/code&gt;. They are for the dependency graph.
The dependency graph is an important feature emerged from recent Blender development.
I will cover this topic in later posts.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every topic from above worths an in-depth exploration.&lt;/p&gt;

&lt;p&gt;Until now we have discussed all but the mesh data filling.
I leave this to the next section.&lt;/p&gt;

&lt;h2 id=&quot;the-bmesh-system&quot;&gt;The BMesh system&lt;/h2&gt;
&lt;p&gt;In history there was a huge refactoring on mesh implementation.
The original mesh sub-system was replaced by
&lt;a href=&quot;http://wiki.blender.org/index.php/Dev:2.6/Source/Modeling/BMesh/Design&quot;&gt;BMesh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The BMesh sub-system is too complicated for such a simple operator as cube adding.
But I think it is a good chance for us
to learn the mechanism behind the BMesh from this simple case.&lt;/p&gt;

&lt;p&gt;After a search on the web I find this
&lt;a href=&quot;http://wiki.blender.org/index.php/Dev:2.6/Source/Modeling/BMesh/Design&quot;&gt;design document&lt;/a&gt; for BMesh.
I suggest to read it later for a more complete understanding of BMesh system, especially the algorithm part if you want to do some extension for it.&lt;/p&gt;

&lt;p&gt;Another excellent material on BMesh is in the header file &lt;code&gt;bmesh.h&lt;/code&gt;. It covers some practical concepts, such as flags, slots, etc.
I think it can be used as a manual on how to use BMesh.&lt;/p&gt;

&lt;p&gt;Now let us start with some basic concepts.&lt;/p&gt;

&lt;p&gt;BMesh system contains a collection of operators(they are BMesh operators which start with prefix of &lt;code&gt;bmo_&lt;/code&gt;, not the Blender operators we saw before), which can be composed to build desired functionality.&lt;/p&gt;

&lt;p&gt;The data which these BMesh operators manipulate, is called &lt;em&gt;slots&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A slot(&lt;code&gt;BMOpSlot&lt;/code&gt;, file &lt;code&gt;bmesh_operator_api.h&lt;/code&gt;) is associated with a slot type(e.g. booleans, integers, or floats).
This type directs a BMesh operator how to read the value from slots.&lt;/p&gt;

&lt;p&gt;A BMesh operator(&lt;code&gt;BMOperator&lt;/code&gt;, file &lt;code&gt;bmesh_operator_api.h&lt;/code&gt;)
owns two kinds of slots: one is for input, and the other is for output. There is a limit on the slots capacity, which is defined by &lt;code&gt;BMO_OP_MAX_SLOTS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before invocation, every BMesh operator is initialized by some meta information, such as “how many slots will be used?” and “which types are these slots?”. This meta information is stored in &lt;code&gt;BMOpDefine&lt;/code&gt; structure. And all &lt;code&gt;BMOpDefine&lt;/code&gt;s are arranged in an array called &lt;code&gt;bmo_opdefines&lt;/code&gt;(file &lt;code&gt;bmesh_opdefines.c&lt;/code&gt;).
Note that every &lt;code&gt;BMOpDefine&lt;/code&gt; also has a name. You can use this name as a key to search for the meta information about one BMesh operator in &lt;code&gt;bmo_opdefines&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Let us now examine how this is implemented in Blender.&lt;/p&gt;

&lt;p&gt;We start from the function &lt;code&gt;EDBM_op_call_and_selectf&lt;/code&gt;,
which is the entry point to the BMesh system:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EDBM_op_call_and_selectf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;verts.out&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;create_cube matrix=%m4 size=%f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RNA_float_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;radius&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPERATOR_CANCELLED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The third argument &lt;code&gt;&quot;verts.out&quot;&lt;/code&gt; is the name of the output slot;
the argument in C-style format string(the fifth argument)
gives the name of BMesh operator which is going to be executed
and indicates the input format for the input slots.
The slots names, &lt;code&gt;verts.out&lt;/code&gt;, &lt;code&gt;matrix&lt;/code&gt;, and &lt;code&gt;size&lt;/code&gt;
are the ones you specified in BMesh operator definitions(&lt;code&gt;bmo_opdefines&lt;/code&gt; array).&lt;/p&gt;

&lt;p&gt;Now we step inside the function &lt;code&gt;EDBM_op_call_and_selectf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first function we encounter is &lt;code&gt;BMO_op_vinitf&lt;/code&gt;.
This function is a parser of the C-style format string.
It gets the name of BMesh operator,
and reads the variadic arguments into input slots.
In this cube adding case,
the operator name is &lt;code&gt;&quot;create_cube&quot;&lt;/code&gt;.
Then a 4x4 matrix and a single float are read into the input slots.
When this function returns, the BMesh operator is successfully constructed.&lt;/p&gt;

&lt;p&gt;The next function &lt;code&gt;BMO_op_exec&lt;/code&gt; executes the BMesh operator.
In the function &lt;code&gt;bmo_create_cube_exec&lt;/code&gt; you can see the
vertices get filled, and faces get constructed.
The output slots are also allocated and filled here
inside the function &lt;code&gt;BMO_slot_buffer_from_enabled_flag&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I list the call stack below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blender-app.exe!bmo_create_cube_exec(BMesh * bm, BMOperator * op) Line 667
blender-app.exe!BMO_op_exec(BMesh * bm, BMOperator * op) Line 219
blender-app.exe!EDBM_op_call_and_selectf(BMEditMesh * em, wmOperator * op, const unsigned char * select_slot_out, const bool select_extend, const unsigned char * fmt, ...) Line 294
blender-app.exe!add_primitive_cube_exec(bContext * C, wmOperator * op) Line 161
blender-app.exe!wm_operator_invoke(bContext * C, wmOperatorType * ot, wmEvent * event, PointerRNA * properties, ReportList * reports, const bool poll_only) Line 1048
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside the function &lt;code&gt;BMO_slot_buffer_from_enabled_flag&lt;/code&gt;,
there are two concepts you have to understand.
One is the header type, which are some properties about the BMesh elements themselves, such as “Is this a vertex, a face, a loop, or an edge?”.
The other is the tool flags, which are some configurations about the BMesh operator being executed.&lt;/p&gt;

&lt;p&gt;After the BMesh operator execution is finished,
we return to the function &lt;code&gt;EDBM_op_call_and_selectf&lt;/code&gt;.
The &lt;code&gt;BMO_slot_buffer_hflag_enable&lt;/code&gt; will use the output slots to mark the newly created vertices selected.&lt;/p&gt;

&lt;p&gt;Finally we end the BMesh operator execution with &lt;code&gt;EDBM_op_finish&lt;/code&gt;, which dereferences the mesh data we are working on.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Here is a short summary of functions which you need to call in your own mesh operator:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;code&gt;ED_object_add_type&lt;/code&gt; to create object.&lt;/li&gt;
  &lt;li&gt;Link your object to the scene with &lt;code&gt;BKE_object_add&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Use &lt;code&gt;WM_event_add_notifier&lt;/code&gt; to emit a specific notification.
Refer to the file &lt;code&gt;WM_types.h&lt;/code&gt; for notification categories and types.&lt;/li&gt;
  &lt;li&gt;Call specific BMesh operator to manipulate mesh data.
You can find BMesh operator specifications(including operator name, input and output slots names, etc.)
in &lt;code&gt;bmo_opdefines&lt;/code&gt; array(file &lt;code&gt;bmesh_opdefines.c&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;some-random-notes-and-remained-questions&quot;&gt;Some random notes and remained questions&lt;/h2&gt;
&lt;p&gt;I think there are a lot of things and details I did not cover in this post.
And there are also many questions for me to work on.
I list some of them below.&lt;/p&gt;

&lt;h3 id=&quot;the-event-system-and-notifications&quot;&gt;The event system and notifications&lt;/h3&gt;
&lt;p&gt;I used to believe that in a GUI framework written in real time graphics API like OpenGL,
the views(I mean the window renderer) refresh itself in a 60 FPS rate.
Hence the models need not to send notifications manually to the view to trigger a refresh.&lt;/p&gt;

&lt;p&gt;And I thought the only possible need for a notification is that
there are some other models depending on the modified parts.
So the manually triggered notification
should be only for the dependency resolving.&lt;/p&gt;

&lt;p&gt;But after reading the source code of Blender,
I noticed the mandatory function call to &lt;code&gt;WM_event_add_notifier&lt;/code&gt; in operators.
It seems that I was wrong.&lt;/p&gt;

&lt;h3 id=&quot;reduce-operator-looking-up-by-string-interning&quot;&gt;Reduce operator looking up by string interning&lt;/h3&gt;
&lt;p&gt;The BMesh operator is indexed by their names.
While you are request one BMesh operator’s definition,
you have to perform a linear search(in function &lt;code&gt;BMO_opcode_from_opname&lt;/code&gt;) on these names.&lt;/p&gt;

&lt;p&gt;This linear search happens twice in the function &lt;code&gt;BMO_op_vinitf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It would be better to pass index of the operator across functions
to reduce the linear search.&lt;/p&gt;

&lt;p&gt;More over, for a static string mapping
(that is, a mapping defined in compile time and remains constant during runtime),
this search can be reduced to constant time using &lt;a href=&quot;http://en.wikipedia.org/wiki/String_interning&quot;&gt;string interning&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;do-i-have-to-add-new-operators-to-bmesh&quot;&gt;Do I have to add new operators to BMesh?&lt;/h3&gt;
&lt;p&gt;For my proposed project in previous post,
I am going to construct mesh dynamically.&lt;/p&gt;

&lt;p&gt;I briefly browsed the BMesh operators list and found the
&lt;code&gt;bmo_mesh_to_bmesh_def&lt;/code&gt;.
So I can construct a mesh structure and invoke this operator to convert it to a BMesh.&lt;/p&gt;

&lt;p&gt;But there is another possible solution: I can write a new BMesh operator
that constructs the mesh directly.&lt;/p&gt;

&lt;p&gt;I will try my ideas out in coming posts.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Apr 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/04/01/analyze-primitive-cube-add-operator.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/04/01/analyze-primitive-cube-add-operator.html</guid>
        
        <category>blender-coding</category>
        
        <category>operator</category>
        
        
      </item>
    
      <item>
        <title>Plan next practice project</title>
        <description>&lt;p&gt;As my next practice project for learning Blender development,
I plan to write an operator
which generates mesh
for isosurfaces of an implicit function.
This is also called contouring.
Many techniques, such as
&lt;a href=&quot;http://en.wikipedia.org/wiki/Marching_cubes&quot;&gt;Marching Cubes&lt;/a&gt;
and
&lt;a href=&quot;http://www.frankpetterson.com/publications/dualcontour/dualcontour.pdf&quot;&gt;Dual Contouring&lt;/a&gt;,
can be used for this task.&lt;/p&gt;

&lt;p&gt;Currently I have only a very general idea for this project.
Some parts of it have not been designed.
For example,
questions like “how to input the implicit function to our operator?”
have not been answered.
If I choose to accept symbolic representation of those implicit function
I have to write a parser for that.
Or, I can use a fixed form of implicit function with some variable coefficients.
In this way the parsing can be really easy but we lose too much flexibility.
I think I need to consider these questions at a later time.&lt;/p&gt;

&lt;p&gt;In the comming post,
I will do an analysis on the operator
&lt;code&gt;MESH_OT_primitive_cube_add&lt;/code&gt;.
This operator illustrates many usefull informations
(such as the MVC model in Blender, the BMesh system, etc.) for me
to write my contouring operator.
More over, it is not involved with too much theoretical background
of the BMesh data structure, so I think it should be not hard to read.&lt;/p&gt;

&lt;p&gt;By looking closely at its source code
I expect following question to be answered:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How is an object linked to the scene?&lt;/li&gt;
  &lt;li&gt;How is the mesh data(i.e. vertices, edges, faces) set?&lt;/li&gt;
  &lt;li&gt;How is the view get notified to update itself?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is all for today. See you in next post.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/03/30/plan-next-practice-project.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/03/30/plan-next-practice-project.html</guid>
        
        <category>blender-coding</category>
        
        
      </item>
    
      <item>
        <title>Add properties for operator</title>
        <description>&lt;p&gt;It is easy to define properties for an operator
and get values of those properties during the execution.
&lt;a href=&quot;http://wiki.blender.org/index.php/Dev:2.5/Source/Architecture/RNA&quot;&gt;This page&lt;/a&gt;
provides a detailed introduction for this task.
As a summary, you can just search for property definition functions
in the file &lt;code&gt;rna_define.h&lt;/code&gt;, and property access functions
in the file &lt;code&gt;rna_access.h&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I put an example
&lt;a href=&quot;https://github.com/thebusytypist/BlenderExtraOperators/tree/master/EchoProperties&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More than defining properties by their value types(&lt;code&gt;int&lt;/code&gt;s, &lt;code&gt;float&lt;/code&gt;s, &lt;code&gt;string&lt;/code&gt;s, etc.),
you can also assign a sub-type for a property.&lt;/p&gt;

&lt;p&gt;A sub-type can supply usefull informations for the editor’s user interface.
In the above example,
I assign a string property with a sub-type of &lt;code&gt;PROP_FILEPATH&lt;/code&gt;.
The &lt;code&gt;PROP_FILEPATH&lt;/code&gt; will make the UI add an extra file browse button
in addition to the widgets of a plain string property.&lt;/p&gt;

&lt;p&gt;In the file &lt;code&gt;rna_define.h&lt;/code&gt; Blender system provides many utilities
to define properties with sub-type.
For sub-type &lt;code&gt;PROP_FILEPATH&lt;/code&gt; I use &lt;code&gt;RNA_def_string_file_path&lt;/code&gt;.
Within this function you can see a call to &lt;code&gt;RNA_def_property&lt;/code&gt;
which indicates the sub-type for our property:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RNA_def_property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROP_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROP_FILEPATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Sat, 28 Mar 2015 19:56:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/03/28/add-properties-for-operator.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/03/28/add-properties-for-operator.html</guid>
        
        <category>blender-coding</category>
        
        <category>operator</category>
        
        
      </item>
    
      <item>
        <title>Write first Blender operator</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://wiki.blender.org/index.php/Dev:2.5/Source/Architecture/Operators/Tutorial&quot;&gt;This operator tutorial&lt;/a&gt;
covers almost all about Blender operator development.
I do not want to merely repeat that tutorial in this post.
Instead, I will discuss a general work flow of adding your own operator,
and try to provide a basic framework for Blender operators developing.&lt;/p&gt;

&lt;p&gt;In the following discus I will take my
&lt;a href=&quot;https://github.com/thebusytypist/BlenderExtraOperators/tree/master/Echo&quot;&gt;&lt;code&gt;Echo&lt;/code&gt;&lt;/a&gt;
operator as an example.&lt;/p&gt;

&lt;h2 id=&quot;the-life-of-a-blender-operator&quot;&gt;The life of a Blender operator&lt;/h2&gt;

&lt;h3 id=&quot;the-operator-template-wmoperatortype&quot;&gt;The operator “template” &lt;code&gt;wmOperatorType&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Have a look at our &lt;code&gt;Echo&lt;/code&gt; operator:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;echo_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wmOperator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BKE_reportf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RPT_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;Operator %s is invoked.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPERATOR_FINISHED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EXTRA_OT_echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wmOperatorType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Echo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Echo operator invocation&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;EXTRA_OT_echo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTYPE_REGISTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You may have already noticed that a &lt;code&gt;wmOperatorType&lt;/code&gt; is used
while you are writing operator registration function;
but a &lt;code&gt;wmOperator&lt;/code&gt; is used
while you are implementing an operator’s execution function.&lt;/p&gt;

&lt;p&gt;The difference between &lt;code&gt;wmOperatorType&lt;/code&gt; and &lt;code&gt;wmOperator&lt;/code&gt;
is in that the former one has only static information,
such as &lt;code&gt;idname&lt;/code&gt;(which will be used as a key for operator finding),
and operator description for GUI display.
While the &lt;code&gt;wmOperator&lt;/code&gt; is a runtime thing and may contain runtime data.&lt;/p&gt;

&lt;p&gt;I prefer to call &lt;code&gt;wmOperator&lt;/code&gt; an operator instance since
it is instantiated from the operator template, &lt;code&gt;wmOperatorType&lt;/code&gt;.
And several operator instances of same type share their static information
in a single operator template.&lt;/p&gt;

&lt;p&gt;When Blender starts, only operator templates are created.
This is the time your operator registration function(&lt;code&gt;EXTRA_OT_echo&lt;/code&gt;) happens.&lt;/p&gt;

&lt;p&gt;The call stack looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blender-app.exe!EXTRA_OT_echo(wmOperatorType * ot) Line 17
blender-app.exe!WM_operatortype_append(void (wmOperatorType *) * opfunc) Line 175
blender-app.exe!ED_operatortypes_extra() Line 5
blender-app.exe!ED_spacetypes_init() Line 130
blender-app.exe!WM_init(bContext * C, int argc, const unsigned char * * argv) Line 159
blender-app.exe!main(int argc, const unsigned char * * UNUSED_argv_c) Line 1767
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jump to the frame which contains the call &lt;code&gt;ED_spacetypes_init&lt;/code&gt;
then you can find all other operators are also registered there.&lt;/p&gt;

&lt;h3 id=&quot;operator-invocation-and-execution&quot;&gt;Operator invocation and execution&lt;/h3&gt;

&lt;p&gt;When you launch an operator
(e.g. hit space key and execute an operator from the pop-up panel),
an operator instance is created.&lt;/p&gt;

&lt;p&gt;The operator instantiation happens in
function &lt;code&gt;wm_operator_create&lt;/code&gt;(file &lt;code&gt;wm_event_system.c&lt;/code&gt;),
which is called by &lt;code&gt;wm_operator_invoke&lt;/code&gt;(file &lt;code&gt;wm_event_system.c&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I list a partial call stack here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blender-app.exe!echo_exec(bContext * C, wmOperator * op) Line 11
blender-app.exe!wm_operator_invoke(bContext * C, wmOperatorType * ot, wmEvent * event, PointerRNA * properties, ReportList * reports, const bool poll_only) Line 1048
blender-app.exe!wm_operator_call_internal(bContext * C, wmOperatorType * ot, PointerRNA * properties, ReportList * reports, const short context, const bool poll_only) Line 1263
blender-app.exe!WM_operator_name_call_ptr(bContext * C, wmOperatorType * ot, short context, PointerRNA * properties) Line 1275
blender-app.exe!operator_call_cb(bContext * C, void * UNUSED_arg1, void * arg2) Line 3268
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the instantiation, &lt;code&gt;wm_operator_invoke&lt;/code&gt; continues and executes
the operator by calling the function which we had registered through
&lt;code&gt;wmOperatorType::exec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now most work of an operator has been finished.
We may revisit these functions later
for some advanced topics like redo/undo stack, modal operator, etc.&lt;/p&gt;

&lt;h3 id=&quot;finalization&quot;&gt;Finalization&lt;/h3&gt;

&lt;p&gt;For an operator instance returns &lt;code&gt;OPERATOR_FINISHED&lt;/code&gt;,
it will be added to a queue of window manager,
rather than destroyed immediately.&lt;/p&gt;

&lt;p&gt;You can trace this process from following call stack:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blender-app.exe!wm_operator_register(bContext * C, wmOperator * op) Line 154
blender-app.exe!wm_operator_finished(bContext * C, wmOperator * op, const bool repeat) Line 697
blender-app.exe!wm_operator_invoke(bContext * C, wmOperatorType * ot, wmEvent * event, PointerRNA * properties, ReportList * reports, const bool poll_only) Line 1073
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the function &lt;code&gt;wm_operator_register&lt;/code&gt;(file &lt;code&gt;wm.c&lt;/code&gt;)
there is call to &lt;code&gt;BLI_addtail(&amp;amp;wm-&amp;gt;operators, op);&lt;/code&gt;
to save the last operator instance.&lt;/p&gt;

&lt;p&gt;And those saved operators in &lt;code&gt;wm-&amp;gt;operators&lt;/code&gt; can be called from a redo,
which is in function &lt;code&gt;WM_operator_last_redo&lt;/code&gt;(file &lt;code&gt;wm_operators.c&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTYPE_REGISTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTYPE_UNDO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For our &lt;code&gt;Echo&lt;/code&gt; operator, which does not have an undo flag,
it will not be active during a redo action.&lt;/p&gt;

&lt;h2 id=&quot;build-blender-with-your-operator&quot;&gt;Build Blender with your operator&lt;/h2&gt;

&lt;p&gt;To include your operator in Blender system,
you have to do following things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Tell the build script to include your operator sources/headers.
You can achieve this by adding an &lt;code&gt;add_subdirectory&lt;/code&gt; in the &lt;code&gt;CMakeLists.txt&lt;/code&gt;
which resides in the directory &lt;code&gt;blender/source/blender/editors&lt;/code&gt;.
You need to call CMake macro &lt;code&gt;blender_add_lib&lt;/code&gt; to
ask the build system to generate a library target for you.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Link the Blender system with your operator library.
You need to add your library name into
CMake variable &lt;code&gt;BLENDER_SORTED_LIBS&lt;/code&gt;
from the file &lt;code&gt;blender/build_files/cmake/macros.cmake&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;blender-extra-operator-framework&quot;&gt;Blender extra operator framework&lt;/h2&gt;

&lt;p&gt;I think it would be tedious to add custom operators
to build system manually every time.
So I start a project to make this process more elegant:
&lt;a href=&quot;https://github.com/thebusytypist/BlenderExtraOperators&quot;&gt;BlenderExtraOperators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You need to apply a patch on Blender’s source only once.
Then all your extra operators can be &lt;em&gt;automatically&lt;/em&gt; added into Blender system.&lt;/p&gt;

&lt;p&gt;More than that, by using &lt;code&gt;BlenderExtraOperators&lt;/code&gt; framework,
you can maintain your operator source out of the Blender directory.
(This is like very much
what &lt;code&gt;clang&lt;/code&gt; project does to its extension &lt;code&gt;clang-tools-extra&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;I hope this project also helps your Blender operator development.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/03/28/write-first-blender-operator.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/03/28/write-first-blender-operator.html</guid>
        
        <category>blender-coding</category>
        
        <category>operator</category>
        
        
      </item>
    
      <item>
        <title>Tips on tracing Blender system</title>
        <description>&lt;p&gt;As a beginner in Blender development
I usually want to find the corresponding source code
of one piece of Blender Python script,
and then learn the mechanism behind the Blender system.&lt;/p&gt;

&lt;p&gt;For normal operator invocation
you can search the operator name in the source code.
And set a break point in the operator registration or invocation function.&lt;/p&gt;

&lt;p&gt;Let us take &lt;code&gt;bpy.ops.mesh.primitive_cube_add&lt;/code&gt; as an example.
You do a solution-wide search of &lt;code&gt;primitive_cube_add&lt;/code&gt;,
the you can find the function &lt;code&gt;MESH_OT_primitive_cube_add&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MESH_OT_primitive_cube_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wmOperatorType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* identifiers */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Add Cube&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Construct a cube mesh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;MESH_OT_primitive_cube_add&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* api callbacks */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_primitive_cube_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ED_operator_scene_editable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* flags */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTYPE_REGISTER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTYPE_UNDO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ED_object_add_unit_props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ED_object_add_generic_props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the registration function of the operator.
Some meta information is given here.
When an operator is going to be invoked(in &lt;code&gt;wm_operator_invoke&lt;/code&gt;),
a factory(&lt;code&gt;wm_operator_create&lt;/code&gt;)
will instantiate the real operator instance(&lt;code&gt;wmOperator&lt;/code&gt;)
and actual operator code happens in the function
&lt;code&gt;add_primitive_cube_exec&lt;/code&gt;,
which is registered by
&lt;code&gt;ot-&amp;gt;exec = add_primitive_cube_exec;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But what if one is looking for the detail implementation of
general script expressions, such as what I do in
&lt;a href=&quot;http://blender.stackexchange.com/a/27401/2355&quot;&gt;this answer&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Let us take the field accessing, such as &lt;code&gt;scene.active&lt;/code&gt;, for an example.&lt;/p&gt;

&lt;p&gt;Firstly the field name &lt;code&gt;active&lt;/code&gt;
must be referred in the C source code for reflection.
So we can search &lt;code&gt;&quot;active&quot;&lt;/code&gt; in the source code.
This will give a lot of matched results.&lt;/p&gt;

&lt;p&gt;Among these matches, we are interested in the &lt;code&gt;scene&lt;/code&gt; object,
which is the object we will search the field from.
So we look for the related matches containing a word &lt;code&gt;scene&lt;/code&gt;.
This will narrow down the search results to only one match:
the one in the file &lt;code&gt;source/blender/makesrna/intern/rna_scene_gen.c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The code looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;PointerPropertyRNA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rna_SceneObjects_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PropertyRNA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rna_SceneObjects_rna_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;active&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;41943041&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Active Object&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;Active object for this scene&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PROP_POINTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROP_NONE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROP_UNIT_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;67567616&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SceneObjects_active_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SceneObjects_active_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RNA_Object&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you can add a break point in function &lt;code&gt;SceneObjects_active_set&lt;/code&gt;
to trace what happens if I set an active object.&lt;/p&gt;

&lt;p&gt;Finally, here is an extra minor tip.&lt;/p&gt;

&lt;p&gt;Sometimes I do not want to open Blender GUI
during tracing
if there is not much interactive operations.
For this case I usually write a script
and
automatically execute the operations in Blender background mode(headless mode).
You can achieve this
by setting command arguments to &lt;code&gt;-b -P script.py&lt;/code&gt; if you are using Visual C++.&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/03/20/tips-on-tracing-blender-system.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/03/20/tips-on-tracing-blender-system.html</guid>
        
        <category>blender-coding</category>
        
        
      </item>
    
      <item>
        <title>Use Blender as Python module</title>
        <description>&lt;p&gt;I have my &lt;code&gt;bpy&lt;/code&gt; module work today by following the directions of
&lt;a href=&quot;http://wiki.blender.org/index.php/User:Ideasman42/BlenderAsPyModule&quot;&gt;BlenderAsPyModule&lt;/a&gt;.
The only difference is in that
I do not copy &lt;code&gt;*.dll&lt;/code&gt; and &lt;code&gt;bpy.pyd&lt;/code&gt; files to &lt;code&gt;site-packages&lt;/code&gt;.
Instead, I set environment variable &lt;code&gt;PATH&lt;/code&gt; pointing to those &lt;code&gt;*.dll&lt;/code&gt;s
and set &lt;code&gt;sys.path&lt;/code&gt; pointing to &lt;code&gt;bpy.pyd&lt;/code&gt;.
However, 
a copy of &lt;code&gt;bin/&amp;lt;blender-version&amp;gt;&lt;/code&gt; in the Python’s root directory
seems inevitable.&lt;/p&gt;

&lt;p&gt;Note that the architecture of Python and &lt;code&gt;bpy&lt;/code&gt; module should be matched.
That is, you cannot imported an x86-64 build of &lt;code&gt;bpy&lt;/code&gt; module
in an x86 version of Python.
Otherwise you would get a “DLL load failed” error.&lt;/p&gt;

&lt;p&gt;There is also a minor building error in the revision of Blender I used
(&lt;code&gt;ff1ed872d93b5c40f1de599d79084d48f213921d&lt;/code&gt;, x86-64 build).
I have to add header path for &lt;code&gt;utfconv.h&lt;/code&gt;
and add definition of &lt;code&gt;WITH_INPUT_IME&lt;/code&gt; manually
to the project &lt;code&gt;bf_intern_ghost&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Mar 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/03/19/blender-as-module.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/03/19/blender-as-module.html</guid>
        
        <category>blender-scripting</category>
        
        
      </item>
    
  </channel>
</rss>
