<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learn Blender Development</title>
    <description>A blog on scripting and extending of Blender.
</description>
    <link>http://thebusytypist.github.io/learnblenderdev-site/</link>
    <atom:link href="http://thebusytypist.github.io/learnblenderdev-site/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 10 Aug 2015 10:37:40 +0800</pubDate>
    <lastBuildDate>Mon, 10 Aug 2015 10:37:40 +0800</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>Notes on construction of DerivedMesh</title>
        <description>&lt;p&gt;Today I make a minor update on
my &lt;a href=&quot;https://gist.github.com/thebusytypist/a2f950fc26ee36957cdd&quot;&gt;Tetrahedron modifier&lt;/a&gt;.
Loops and faces are constructed in order to get a solid tetrahedron mesh.&lt;/p&gt;

&lt;p&gt;In the Tetrahedron modifier,
firstly a &lt;code&gt;DerivedMesh&lt;/code&gt; with desired count of vertices, loops, and faces is allocated
using &lt;code&gt;CDDM_new&lt;/code&gt;,
then vertices, loops and faces data are filled into &lt;code&gt;DerivedMesh&lt;/code&gt;
using functions &lt;code&gt;CDDM_get_verts&lt;/code&gt;, &lt;code&gt;CDDM_get_loops&lt;/code&gt;, and &lt;code&gt;CDDM_get_polys&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a common approach to construct &lt;code&gt;DerivedMesh&lt;/code&gt; from scratch.
The similar method can also be seen in Remesh modifier.&lt;/p&gt;

&lt;p&gt;You can also use BMesh tools to construct &lt;code&gt;DerivedMesh&lt;/code&gt; in a modifier.
This is usually seen in modifiers whose task is to refine parts of mesh.
A typical example is Bevel modifier.&lt;/p&gt;

&lt;p&gt;In this approach, a BMesh object has to be constructed using &lt;code&gt;DM_to_bmesh&lt;/code&gt;,
then followed by desired BMesh operations.
After all operations have finished,
the BMesh object gets converted to result &lt;code&gt;DerivedMesh&lt;/code&gt; using &lt;code&gt;CDDM_from_bmesh&lt;/code&gt;,
and released using &lt;code&gt;BM_mesh_free&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/08/10/notes-on-construction-of-derived-mesh.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/08/10/notes-on-construction-of-derived-mesh.html</guid>
        
        <category>blender-coding</category>
        
        <category>modifier</category>
        
        
      </item>
    
      <item>
        <title>Learn how Blender&#39;s modifier system works (part 3)</title>
        <description>&lt;p&gt;In this post I am going to implement a trivial modifier
to show how to extend Blender by adding custom modifiers.&lt;/p&gt;

&lt;p&gt;My implementation is based on the tagged version &lt;code&gt;v2.75a&lt;/code&gt;.
To try it out,
you can checkout that tag, branch from that,
and apply &lt;a href=&quot;https://gist.github.com/thebusytypist/a2f950fc26ee36957cdd&quot;&gt;my patch&lt;/a&gt;.
You are also encouraged to follow the patch file commit by commit
to see how each step is done.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#task-statements&quot;&gt;Task statements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#add-skeleton-code&quot;&gt;Add skeleton code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#register-the-new-modifier-to-system&quot;&gt;Register the new modifier to system&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#implement-the-modifier&quot;&gt;Implement the modifier&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#expose-modifier-to-user-interface&quot;&gt;Expose modifier to user interface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#add-parameters-to-modifieroptional&quot;&gt;Add parameters to modifier(optional)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#footnotes&quot;&gt;Footnotes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;There has been already a good tutorial
&lt;a href=&quot;http://wiki.blender.org/index.php/User:Enjalot/Creating_a_custom_modifier&quot;&gt;on the Blender’s wiki&lt;/a&gt;.
It covers almost all about Blender modifier development.
But it does not have many words on &lt;em&gt;why&lt;/em&gt; a particular step is done.&lt;/p&gt;

&lt;p&gt;In this post I try to supply more explanations on the mechanism behind every step we will take,
and organize the whole process in a more structured way.
Besides, I will provide some topics which it does not cover, such as modifier parameter.&lt;/p&gt;

&lt;h2 id=&quot;task-statements&quot;&gt;Task statements&lt;/h2&gt;
&lt;p&gt;This trivial modifier will generate a &lt;a href=&quot;https://en.wikipedia.org/wiki/Tetrahedron&quot;&gt;tetrahedron&lt;/a&gt;
at the location of one object.
And we are able to set a &lt;code&gt;scale&lt;/code&gt; parameter through modifier’s panel
to control the size of the tetrahedron.&lt;/p&gt;

&lt;p&gt;Let us call this modifier “Tetrahedron”.&lt;/p&gt;

&lt;h2 id=&quot;add-skeleton-code&quot;&gt;Add skeleton code&lt;/h2&gt;
&lt;p&gt;We first define the data structure which is going to be passed to the modifier.
This is done by adding following to the file &lt;code&gt;source/blender/makesdna/DNA_modifier_types.h&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* Tetrahedron modifier */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TetrahedronModifierData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ModifierData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TetrahedronModifierData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above code we make a ‘derived’ class of &lt;code&gt;ModifierData&lt;/code&gt;.
This structure will be parsed by Blender’s reflection system(a.k.a the DNA and RNA infrastructure) later.&lt;/p&gt;

&lt;p&gt;Then we define the &lt;code&gt;ModifierTypeInfo&lt;/code&gt; for the Tetrahedron modifier in a new file &lt;code&gt;MOD_tetrahedron.c&lt;/code&gt;.
In this step I just make a skeleton of this modifier. The blanks will be filled later.&lt;/p&gt;

&lt;p&gt;Finally, we include the new modifier into the build system by registering &lt;code&gt;MOD_tetrahedron.c&lt;/code&gt;
into the build script &lt;code&gt;source/blender/modifiers/CMakeLists.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may refer to &lt;a href=&quot;/learnblenderdev-site/2015/07/25/how-modifier-system-works-part-2.html&quot;&gt;part 2&lt;/a&gt;
of these series for discussion of &lt;code&gt;ModifierData&lt;/code&gt; and &lt;code&gt;ModifierTypeInfo&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;register-the-new-modifier-to-system&quot;&gt;Register the new modifier to system&lt;/h2&gt;
&lt;p&gt;Now we move on to register our new modifier so the Blender modifier system can find it.&lt;/p&gt;

&lt;p&gt;At the starting of Blender, it initializes mappings from &lt;code&gt;ModifierType&lt;/code&gt; to &lt;code&gt;ModifierTypeInfo&lt;/code&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.
Whenever a modifier is requested by user,
Blender uses the &lt;code&gt;ModifierType&lt;/code&gt; as a key to retrieve the desired &lt;code&gt;ModifierTypeInfo&lt;/code&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;We first create a new entry in &lt;code&gt;ModifierType&lt;/code&gt; enum by &lt;em&gt;appending&lt;/em&gt; &lt;code&gt;eModifierType_Tetrahedron = 52,&lt;/code&gt;
into the &lt;code&gt;enum ModifierType&lt;/code&gt;.
As you already noticed, new modifier type must be &lt;em&gt;appended&lt;/em&gt; to &lt;code&gt;ModifierType&lt;/code&gt;.
This is because only the integer value of &lt;code&gt;ModifierType&lt;/code&gt; is serialized,
any change in &lt;code&gt;ModifierType&lt;/code&gt; enum that failed to preserve its original integer value will cause an incorrect deserialization of modifiers in previously saved Blender files.&lt;/p&gt;

&lt;p&gt;After that we construct a new mapping from &lt;code&gt;ModifierType&lt;/code&gt; to &lt;code&gt;ModifierTypeInfo&lt;/code&gt; in function &lt;code&gt;modifier_type_init&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;INIT_TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tetrahedron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally we provide declaration of Tetrahedron’s &lt;code&gt;ModifierTypeInfo&lt;/code&gt;
in file &lt;code&gt;source/blender/modifiers/MOD_modifiertypes.h&lt;/code&gt; so the initializer can see it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModifierTypeInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifierType_Tetrahedron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;implement-the-modifier&quot;&gt;Implement the modifier&lt;/h2&gt;
&lt;p&gt;Now we go on to fill the functions in &lt;code&gt;MOD_tetrahedron.c&lt;/code&gt; with actual implementation.&lt;/p&gt;

&lt;p&gt;As we discussed in &lt;a href=&quot;/learnblenderdev-site/2015/07/25/how-modifier-system-works-part-2.html&quot;&gt;part 2&lt;/a&gt;
of these series, we construct a &lt;code&gt;DerivedMesh&lt;/code&gt; and pass it through the modifiers stack.
Please look at the source code for details.&lt;/p&gt;

&lt;h2 id=&quot;expose-modifier-to-user-interface&quot;&gt;Expose modifier to user interface&lt;/h2&gt;
&lt;p&gt;Now our Tetrahedron modifier is almost finished.
We still have to expose our modifier to the user interface
so one user can add a modifier through the modifier panel
or by executing &lt;code&gt;bpy.ops.object.modifier_add&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This task can be done through Blender’s RNA system.&lt;/p&gt;

&lt;p&gt;Given a &lt;code&gt;ModifierType&lt;/code&gt;,
the RNA system should be able to “dynamic cast” a &lt;code&gt;ModifierType&lt;/code&gt; to the “derived” one.
We add following code in the function &lt;code&gt;rna_Modifier_refine&lt;/code&gt;&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;eModifierType_Tetrahedron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RNA_TetrahedronModifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An icon and description used for “Add Modifier” dropdown menu can be put in the &lt;code&gt;modifier_type_items&lt;/code&gt; array&lt;sup id=&quot;fnref:3:1&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eModifierType_Tetrahedron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;TETRAHEDRON&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICON_MOD_BUILD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tetrahedron&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And we also provide similar informations for the modifier panel:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rna_def_modifier_tetrahedron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlenderRNA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StructRNA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PropertyRNA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;srna&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RNA_def_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;TetrahedronModifier&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Modifier&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RNA_def_struct_ui_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tetrahedron Modifier&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Generate Tetrahedron&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RNA_def_struct_sdna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;TetrahedronModifierData&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RNA_def_struct_ui_icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICON_MOD_BUILD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For simplicity I use &lt;code&gt;ICON_MOD_BUILD&lt;/code&gt; here.&lt;/p&gt;

&lt;p&gt;Remember to add above function to &lt;code&gt;RNA_def_modifier&lt;/code&gt;&lt;sup id=&quot;fnref:3:2&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; in order to execute it.&lt;/p&gt;

&lt;p&gt;Currently we do not have parameters in the Tetrahedron modifier.
So we just provide a dummy panel in the Python function &lt;code&gt;DATA_PT_modifiers.draw&lt;/code&gt;&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TETRAHEDRON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Comming soon.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Optionally, you can also customize your modifier icon in the outline view&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;eModifierType_Tetrahedron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UI_icon_draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICON_MOD_BUILD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;add-parameters-to-modifieroptional&quot;&gt;Add parameters to modifier(optional)&lt;/h2&gt;
&lt;p&gt;Now you can build your costomized Blender and try the Tetrahedron modifier.&lt;/p&gt;

&lt;p&gt;Sometimes we also want to pass parameters through modifier panel.&lt;/p&gt;

&lt;p&gt;For example, we can put a &lt;code&gt;scale&lt;/code&gt; parameter in &lt;code&gt;TetrahedronModifierdata&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* Tetrahedron modifier */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TetrahedronModifierData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ModifierData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TetrahedronModifierData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While you are implementing the modifier, you can read this parameter as below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;TetrahedronModifierData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TetrahedronModifierData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that we should keep the structure size be multiples of 8 bytes
according to &lt;a href=&quot;http://wiki.blender.org/index.php/Dev:Source/Architecture/SDNA_Notes&quot;&gt;this wiki page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is also required that this parameter definition should be exported to interface using RNA.
We revise the previous RNA property/struct definition as below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rna_def_modifier_tetrahedron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlenderRNA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StructRNA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PropertyRNA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;srna&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RNA_def_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;TetrahedronModifier&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Modifier&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RNA_def_struct_ui_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tetrahedron Modifier&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Generate Tetrahedron&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RNA_def_struct_sdna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;TetrahedronModifierData&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RNA_def_struct_ui_icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICON_MOD_BUILD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RNA_def_property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;scale&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROP_FLOAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROP_FACTOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RNA_def_property_float_sdna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;scale&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RNA_def_property_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;100.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RNA_def_property_ui_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;100.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RNA_def_property_ui_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Scale&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Scale of the tetrahedron&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RNA_def_property_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;rna_Modifier_update&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that we provide the same string &lt;code&gt;&quot;scale&quot;&lt;/code&gt; for both &lt;code&gt;RNA_def_property&lt;/code&gt; and &lt;code&gt;RNA_def_property_float_sdna&lt;/code&gt;.
But they have different meanings.&lt;/p&gt;

&lt;p&gt;The first &lt;code&gt;&quot;scale&quot;&lt;/code&gt; for &lt;code&gt;RNA_def_property&lt;/code&gt; is the field name to be exported in Python.
The second is the name of corresponding struct member in C++.&lt;/p&gt;

&lt;p&gt;Finally we go on to revise the panel appearance in Python:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TETRAHEDRON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;scale&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the Tetrahedron modifier is finished.
And it also works with other modifiers correctly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/learnblenderdev-site/assets/tetrahedron-array-modifiers.png&quot; alt=&quot;Tetrahedron and Array&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;This happens in the function &lt;code&gt;modifier_type_init&lt;/code&gt;(file &lt;code&gt;source/blender/modifiers/intern/MOD_util.c&lt;/code&gt;). &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;This happens in the function &lt;code&gt;modifierType_getInfo&lt;/code&gt;(file &lt;code&gt;source/blender/blenkernel/intern/modifier.c&lt;/code&gt;). &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;This is in the file &lt;code&gt;source/blender/makesrna/intern/rna_modifier.c&lt;/code&gt;. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:3:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:3:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;This is in the file &lt;code&gt;release/scripts/startup/bl_ui/properties_data_modifier.py&lt;/code&gt;. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;This is in the file &lt;code&gt;source/blender/editors/space_outliner/outliner_draw.c&lt;/code&gt;. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 04 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/08/04/how-modifier-system-works-part-3.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/08/04/how-modifier-system-works-part-3.html</guid>
        
        <category>blender-coding</category>
        
        <category>modifier</category>
        
        
      </item>
    
      <item>
        <title>Discrete Gauss-Bonnet theorem in Blender</title>
        <description>&lt;p&gt;I watched &lt;a href=&quot;https://www.youtube.com/watch?v=Mcal5Cy7r4E&quot;&gt;this video&lt;/a&gt; from Keenan Crane this morning.
The discrete Gauss-Bonnet theorem impresses me so much
and I think I can illustrate it in Blender scripting.&lt;/p&gt;

&lt;p&gt;The discrete Gauss-Bonnet theorem(quoted from &lt;a href=&quot;http://brickisland.net/cs177fa12/?p=51&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;Consider a (connected, orientable) simplicial surface \( \mathbf{K} \)
with finitely many vertices \( \mathbf{V} \),
edges \( \mathbf{E} \) and faces \( \mathbf{F} \).
A discrete analog of the Gauss-Bonnet theorem holds for simplicial surfaces, namely&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\sum_{v \in \mathbf{V}} d(v) = 2 \pi \chi
&lt;/script&gt;

&lt;p&gt;where \( \chi = |\mathbf{V}| - |\mathbf{E}| + |\mathbf{F}|\) is the &lt;em&gt;Euler characteristic&lt;/em&gt; of the surface,
and \( d(v) \) is the &lt;em&gt;angle defect&lt;/em&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
d(v) = 2 \pi - \sum_{f \in \mathbf{F}_v} \angle_f(v)
&lt;/script&gt;

&lt;p&gt;where \( \mathbf{F}_v \) is the faces containing \( v \) and
\( \angle_f(v) \) is the interior angle of the face \( f \) at vertex \( v \).&lt;/p&gt;

&lt;p&gt;The implementation is straightforward from the above theorem statements.
I put my source code &lt;a href=&quot;https://gist.github.com/thebusytypist/cffbdb3f695487261490&quot;&gt;on the gist&lt;/a&gt;.
You can run it as a Blender operator. And remember to check Blender’s info view for results.&lt;/p&gt;

&lt;p&gt;There is one thing worthing noting.
In my first try of implementing this operator,
I traverse &lt;code&gt;link_edges&lt;/code&gt; for each vertex to calculate interior angles,
expecting that the adjacent edges are stored in &lt;code&gt;link_edges&lt;/code&gt; sequence.&lt;/p&gt;

&lt;p&gt;However this does not work as expected. The edges in &lt;code&gt;link_edges&lt;/code&gt; are not arranged in any specific order(neither clock-wise nor counter-clock-wise). Therefore I can not make any assumption on it.&lt;/p&gt;

&lt;p&gt;Then I try another approach: I traverse faces in &lt;code&gt;link_faces&lt;/code&gt; for each vertex,
and find the adjacent edges from the face.
This approach works for me.&lt;/p&gt;

&lt;p&gt;I kept both implementations(&lt;code&gt;AngleDefects&lt;/code&gt; and &lt;code&gt;AngleDefects2&lt;/code&gt;) in my source code,
so you can play around with them.&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/07/28/discrete-gauss-bonnet-theorem.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/07/28/discrete-gauss-bonnet-theorem.html</guid>
        
        <category>blender-scripting</category>
        
        <category>mathematics</category>
        
        
      </item>
    
      <item>
        <title>Fix mesh grid indexing in 3D dual contouring</title>
        <description>&lt;p&gt;I fixed a problem in my previous 3D dual contouring script today.&lt;/p&gt;

&lt;p&gt;For a given mesh grid constructed by &lt;code&gt;numpy.meshgrid&lt;/code&gt;, for example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meshgrid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A coordinate of &lt;code&gt;(x0 + step * x, y0 + step * y, z0 + step * z)&lt;/code&gt;,
whose integer grid coordinate is &lt;code&gt;(x, y, z)&lt;/code&gt;,
needs to be indexed from the mesh grid using &lt;code&gt;s[y, x, z]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now the 3D heart function can be successfully contoured:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/learnblenderdev-site/assets/heart-function-3d-dc.png&quot; alt=&quot;3D dual contoured heart function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The source code of this script can be found &lt;a href=&quot;https://gist.github.com/thebusytypist/b043745a6d7712998485&quot;&gt;here&lt;/a&gt;.
It still has some topology issues to be resolved.&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Jul 2015 17:57:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/07/25/fix-meshgrid-indexing-in-3d-dual-contouring.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/07/25/fix-meshgrid-indexing-in-3d-dual-contouring.html</guid>
        
        <category>blender-scripting</category>
        
        
      </item>
    
      <item>
        <title>Learn how Blender&#39;s modifier system works (part 2)</title>
        <description>&lt;p&gt;We have learned how a modifier is constructed
in the &lt;a href=&quot;/learnblenderdev-site/2015/07/23/how-modifier-system-works-part-1.html&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post we will learn how a modifier is applied.&lt;/p&gt;

&lt;p&gt;We have already known that a modifier defines a derived &lt;code&gt;ModifierTypeInfo&lt;/code&gt; structure.
Take &lt;code&gt;Array&lt;/code&gt; modifier as an example, its &lt;code&gt;ModifierTypeInfo&lt;/code&gt; is defined
in the file &lt;code&gt;source/blender/modifiers/intern/MOD_array.c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;applyModifier&lt;/code&gt; function in &lt;code&gt;ModifierTypeInfo&lt;/code&gt; seems to be the place where actual modifier execution happens.
We can set a break point in it and do some tracing.&lt;/p&gt;

&lt;p&gt;Following is a call stack for the &lt;code&gt;applyModifier&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;arrayModifier_doArray(ArrayModifierData * amd, Scene * scene, Object * ob, DerivedMesh * dm, ModifierApplyFlag flag)
applyModifier(ModifierData * md, Object * ob, DerivedMesh * dm, ModifierApplyFlag flag)
modwrap_applyModifier(ModifierData * md, Object * ob, DerivedMesh * dm, ModifierApplyFlag flag)
mesh_calc_modifiers(Scene * scene, Object * ob, float[3] * inputVertexCos, DerivedMesh * * deform_r, DerivedMesh * * final_r, int useRenderParams, int useDeform, int needMapping, unsigned __int64 dataMask, int index, int useCache, int build_shapekey_layers)
mesh_build_data(Scene * scene, Object * ob, unsigned __int64 dataMask, int build_shapekey_layers, int needMapping)
makeDerivedMesh(Scene * scene, Object * ob, BMEditMesh * em, unsigned __int64 dataMask, int build_shapekey_layers)
BKE_object_handle_data_update(EvaluationContext * eval_ctx, Scene * scene, Object * ob)
BKE_object_handle_update_ex(EvaluationContext * eval_ctx, Scene * scene, Object * ob, RigidBodyWorld * rbw, const bool do_proxy_update)
scene_update_object_func(TaskPool * pool, void * taskdata, int threadid)
BLI_task_pool_work_and_wait(TaskPool * pool)
scene_update_objects(EvaluationContext * eval_ctx, Main * bmain, Scene * scene, Scene * scene_parent)
scene_update_tagged_recursive(EvaluationContext * eval_ctx, Main * bmain, Scene * scene, Scene * scene_parent)
BKE_scene_update_tagged(EvaluationContext * eval_ctx, Main * bmain, Scene * scene)
wm_event_do_notifiers(bContext * C)
WM_main(bContext * C)
main(int argc, const unsigned char * * UNUSED_argv_c)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the function &lt;code&gt;mesh_calc_modifiers&lt;/code&gt; we see a loop through all modifiers:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ndm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modwrap_applyModifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ASSERT_IS_VALID_DM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ndm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ndm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* if the modifier returned a new dm, release the old one */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ndm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Inside this loop each modifier gets executed in &lt;code&gt;modwrap_applyModifier&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;We notice that a &lt;code&gt;DerivedMesh&lt;/code&gt;(file &lt;code&gt;source/blender/blenkernel/BKE_DerivedMesh.h&lt;/code&gt;) object(variable &lt;code&gt;dm&lt;/code&gt; in the code) is passed to the modifier
and then another &lt;code&gt;DerivedMesh&lt;/code&gt; object(variable &lt;code&gt;ndm&lt;/code&gt; in the code) is returned back to the caller.
We can then conclude that the &lt;code&gt;DerivedMesh&lt;/code&gt; is the media that gets passed through modifier stack.
&lt;a href=&quot;http://wiki.blender.org/index.php/Dev:Source/Modeling/DerivedMesh&quot;&gt;Here&lt;/a&gt; is the document for &lt;code&gt;Derivedmesh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also note that the caller of a modifier always &lt;em&gt;own&lt;/em&gt; the &lt;code&gt;DerivedMesh&lt;/code&gt; object.
If we construct a new &lt;code&gt;DerivedMesh&lt;/code&gt; in our modifier like what the &lt;code&gt;Array&lt;/code&gt; modifier does,
the new derived mesh will be &lt;em&gt;moved&lt;/em&gt; to the caller, and the old one will be released.&lt;/p&gt;

&lt;p&gt;Now we go back to the function &lt;code&gt;arrayModifier_doArray&lt;/code&gt;, where actual modifier action happens.
This is a long function. I try to provide an overview of what it does.&lt;/p&gt;

&lt;p&gt;In the beginning of &lt;code&gt;arrayModifier_doArray&lt;/code&gt; it collects options and parameters from the &lt;code&gt;ArrayModifierData&lt;/code&gt;(variable &lt;code&gt;amd&lt;/code&gt; in following source code).
For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_merge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MOD_ARR_MERGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use_offset_ob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MOD_ARR_OFF_OBJ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset_ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then it reads in the &lt;code&gt;DerivedMesh&lt;/code&gt; which is passed from previous modifier in the modifier stack:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;chunk_nverts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumVerts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chunk_nedges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumEdges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chunk_nloops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumLoops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chunk_npolys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getNumPolys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;src_mvert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getVertArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After all information has been ready, a new derived mesh will be constructed:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CDDM_from_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result_nverts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result_nedges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result_nloops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result_npolys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we can write to this new derived mesh:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* copy customdata to original geometry */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DM_copy_vert_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_nverts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DM_copy_edge_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_nedges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DM_copy_loop_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_nloops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DM_copy_poly_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_npolys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally the modifier finishes by returning the new derived mesh: &lt;code&gt;return result;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we have learned almost all about Blender modifier system,
except that the dependency graph related functions in a modifier implementation.
I leave these things to future posts.&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/07/25/how-modifier-system-works-part-2.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/07/25/how-modifier-system-works-part-2.html</guid>
        
        <category>blender-coding</category>
        
        <category>modifier</category>
        
        
      </item>
    
      <item>
        <title>Preliminary 3D dual contouring</title>
        <description>&lt;p&gt;I try to do 3D dual contouring in Python today.
It runs too slow and suffers severe numerical problems in some test cases.
I guess my intersection solver fails and causes infinite loop.&lt;/p&gt;

&lt;p&gt;Anyway here is a working result I get for the moment:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/learnblenderdev-site/assets/preliminary-3d-dc.png&quot; alt=&quot;Preliminary 3D dual contouring&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/07/24/preliminary-3d-dual-contouring.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/07/24/preliminary-3d-dual-contouring.html</guid>
        
        <category>blender-scripting</category>
        
        
      </item>
    
      <item>
        <title>Learn how Blender&#39;s modifier system works (part 1)</title>
        <description>&lt;p&gt;In this and following several posts I will write about Blender’s modifier system.
I expect following questions to be answered:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How is modifiers’ source code organized in the source tree?&lt;/li&gt;
  &lt;li&gt;How is a modifier registered to Blender system?&lt;/li&gt;
  &lt;li&gt;Where and when does a modifier operate?&lt;/li&gt;
  &lt;li&gt;How are modifiers combined together?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It seems that the last question is too broad. Let me elaborate to make it more specific.&lt;/p&gt;

&lt;p&gt;As you know, Blender organizes all modifiers in a stack.
Then multiple modifiers can be combined and chained together.
Two adjacent modifiers in the stack must agree in a data format
so that the processed data from previous modifier can be handed over
to the next one.
So what is the protocol of data format which is used among different modifiers?&lt;/p&gt;

&lt;p&gt;Now let us get started with above questions in mind.&lt;/p&gt;

&lt;p&gt;First we start with the function where a modifier is added to an object.
Hover the cursor on the &lt;code&gt;Array&lt;/code&gt; modifier icon from the &lt;code&gt;Add Modifier&lt;/code&gt; menu in the modifiers panel,
you can see the Python code in the pop-up: &lt;code&gt;bpy.ops.object.modifier_add(type=&quot;ARRAY&quot;)&lt;/code&gt;.
This is an operator named &lt;code&gt;modifier_add&lt;/code&gt;.
Search this name in the source code you will find the operator registration function &lt;code&gt;OBJECT_OT_modifier_add&lt;/code&gt;.
And then you can locate the actual execution function of this operator: &lt;code&gt;modifier_add_exec&lt;/code&gt;(file &lt;code&gt;source/blender/editors/object/object_modifier.c&lt;/code&gt;).
We add a break point in &lt;code&gt;modifier_add_exec&lt;/code&gt; to trace the construction of a modifier.&lt;/p&gt;

&lt;p&gt;Now we try to add an &lt;code&gt;Array&lt;/code&gt; modifier and step into the &lt;code&gt;ED_object_modifier_add&lt;/code&gt; from &lt;code&gt;modifier_add_exec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ED_object_modifier_add&lt;/code&gt;,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Information of a modifier is retrieved by calling function
&lt;code&gt;modifierType_getInfo&lt;/code&gt;(file &lt;code&gt;source/blender/blenkernel/intern/modifier.c&lt;/code&gt;)
on a given &lt;code&gt;ModifierType&lt;/code&gt;(file &lt;code&gt;source/blender/makesdna/DNA_modifier_types.h&lt;/code&gt;).
This information is stored in &lt;code&gt;struct ModifierTypeInfo&lt;/code&gt;(file &lt;code&gt;source/blender/blenkernel/BKE_modifier.h&lt;/code&gt;).
You can register your own modifiers by providing informations for them in this file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A new modifier is constructed in function &lt;code&gt;modifier_new&lt;/code&gt;(file &lt;code&gt;source/blender/blenkernel/intern/modifier.c&lt;/code&gt;).
In this function, a &lt;code&gt;ModifierData&lt;/code&gt; structure(file &lt;code&gt;source/blender/makesdna/DNA_modifier_types.h&lt;/code&gt;) is allocated
through &lt;code&gt;MEM_callocN(mti-&amp;gt;structSize, mti-&amp;gt;structName)&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Note that a “derived” &lt;code&gt;ModifierData&lt;/code&gt; is actually allocated here.
The allocator uses a structure size recored in &lt;code&gt;ModifierTypeInfo&lt;/code&gt;(&lt;code&gt;mti&lt;/code&gt; variable in the code), which usually is different from &lt;code&gt;ModifierData&lt;/code&gt;’s.&lt;/p&gt;

    &lt;p&gt;For &lt;code&gt;Array&lt;/code&gt; modifier, we can see its derived &lt;code&gt;ModifierData&lt;/code&gt; is named as &lt;code&gt;ArrayModifierData&lt;/code&gt;,
which is defined in the file &lt;code&gt;source/blender/makesdna/DNA_modifier_types.h&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;After that, the modifier gets initialized through &lt;code&gt;if (mti-&amp;gt;initData) mti-&amp;gt;initData(md);&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;The function &lt;code&gt;initData&lt;/code&gt; is a function pointer you could set in the &lt;code&gt;ModifierTypeInfo&lt;/code&gt; structure.
By stepping into this function you can reach the definition of &lt;code&gt;Array&lt;/code&gt; modifier’s initializer,
which resides in the file &lt;code&gt;source/blender/modifiers/intern/MOD_array.c&lt;/code&gt;.
During the initialization stage, one modifier’s “derived” &lt;code&gt;ModifierData&lt;/code&gt; is initialized.&lt;/p&gt;

    &lt;p&gt;In the file &lt;code&gt;MOD_array.c&lt;/code&gt; there are also many other functions.
These functions could be set to the &lt;code&gt;ModifierTypeInfo&lt;/code&gt; structure when you define the modifier.&lt;/p&gt;

    &lt;p&gt;Along with the file &lt;code&gt;MOD_array.c&lt;/code&gt; there are many other files with a prefix of &lt;code&gt;MOD_&lt;/code&gt;.
These are the sources of other modifiers. They reside in the folder &lt;code&gt;source/blender/modifiers/intern&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Speak in the Object-Oriented glossary,
the &lt;code&gt;ModifierTypeInfo&lt;/code&gt; is the common interface that modifiers should derive from.&lt;/p&gt;

&lt;p&gt;Now the definition and construction of a modifier are finished.&lt;/p&gt;

&lt;p&gt;In the next part I will dive into the execution code of the &lt;code&gt;Array&lt;/code&gt; modifier.&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/07/23/how-modifier-system-works-part-1.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/07/23/how-modifier-system-works-part-1.html</guid>
        
        <category>blender-coding</category>
        
        <category>modifier</category>
        
        
      </item>
    
      <item>
        <title>Some updates on my 2D dual contouring script</title>
        <description>&lt;p&gt;I test more cases with my 2D dual contouring script. Here are some updates.&lt;/p&gt;

&lt;h2 id=&quot;touching-vertex&quot;&gt;Touching vertex&lt;/h2&gt;

&lt;p&gt;When the isopleth hits the grid vertex, duplicated vertices may be generated.
See figure below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/learnblenderdev-site/assets/dc-touching-vertex.svg&quot; alt=&quot;Touching vertex&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The touching grid point(the black one) will have duplicated vertices generated in the red cells.
Then these vertices will overlap at the black grid point.&lt;/p&gt;

&lt;p&gt;My solution is to omit the edge which has one side with zero value and the other side with positive value. I mark this kind of edges with bold black color in the figure.&lt;/p&gt;

&lt;h2 id=&quot;solution-outside-the-cell&quot;&gt;Solution outside the cell&lt;/h2&gt;

&lt;p&gt;Sometimes a solution of pseudoinverse will be outside the cell:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/learnblenderdev-site/assets/dc-vertex-outside-cube.svg&quot; alt=&quot;Solution outside the cell&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is a sample data set:
The first intersection is &lt;code&gt;(0.17391304, -0.84122239)&lt;/code&gt; with normal vector &lt;code&gt;(0.27874198, -0.41094215)&lt;/code&gt;;
The second intersection is &lt;code&gt;(0.26083516, -0.7826087)&lt;/code&gt; with normal vector &lt;code&gt;(0.40979725, -0.60430874)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this case I simply set the solution to the center of the cell.&lt;/p&gt;

&lt;h2 id=&quot;incorrect-topology&quot;&gt;Incorrect topology&lt;/h2&gt;

&lt;p&gt;Currently I construct edges from one grid cell to its four adjacent neighbors. This approach will generate incorrect topology when it encounters sharp features.&lt;/p&gt;

&lt;p&gt;Here is an example of upper part of heart function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/learnblenderdev-site/assets/2d-dc-incorrect-topology.svg&quot; alt=&quot;Incorrect topology in heart function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The red part forms an incorrect “bridge”-like mesh.
I do not find a solution yet.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/07/22/revise-2d-dual-contouring.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/07/22/revise-2d-dual-contouring.html</guid>
        
        <category>blender-scripting</category>
        
        
      </item>
    
      <item>
        <title>2D dual contouring in Blender script</title>
        <description>&lt;p&gt;After a long break I begin to implement 2D dual contouring today.
This is the result I achieved:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/learnblenderdev-site/assets/heart-function-2d-dc.png&quot; alt=&quot;2D dual contouring of heart function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My implementation is based on
&lt;a href=&quot;http://www.frankpetterson.com/publications/dualcontour/dualcontour.pdf&quot;&gt;Dual Contouring of Hermite Data&lt;/a&gt;
and
&lt;a href=&quot;http://www.cs.berkeley.edu/~jrs/meshpapers/SchaeferWarren2.pdf&quot;&gt;Dual Contouring: “The Secret Sauce”&lt;/a&gt;.
The source code of this tool can be found
&lt;a href=&quot;https://gist.github.com/thebusytypist/1d1c9db590670def874e&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can edit the &lt;code&gt;Function&lt;/code&gt; parameter to contour other kinds of geometry.
The input of &lt;code&gt;Function&lt;/code&gt; parameter should be a 2D distance field function.
Its zero isopleth will be contoured. 
You may find &lt;a href=&quot;http://iquilezles.org/www/articles/distfunctions/distfunctions.htm&quot;&gt;this page&lt;/a&gt; useful.&lt;/p&gt;

&lt;p&gt;There are also some details worth noting.
I use &lt;code&gt;numpy.linalg.pinv&lt;/code&gt; to solve linear system.
According to numpy’s document, &lt;code&gt;pinv&lt;/code&gt; computes the Moore-Penrose pseudo-inverse of a matrix.
Hence when we are given a linear system which is rank deficient,
the solution is minimized to the origin.
This may lead to a vertex outside its bounding square.
In this implementation I use the mass point translation approach to resolve this problem.&lt;/p&gt;

&lt;p&gt;This tool is tested on some simple cases and most of them works well.
But there is a problem when the isopleth hits the grid point.
In this case the common intersection point will be used by four adjacent squares
and then have four vertices generated.
This makes the shape’s topology incorrect.
A slight displacement may alleviate this problem.
But I am looking for a more robust solution.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/07/16/bpy-2d-dual-contouring.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/07/16/bpy-2d-dual-contouring.html</guid>
        
        <category>blender-scripting</category>
        
        
      </item>
    
      <item>
        <title>Construct BMesh from Mesh</title>
        <description>&lt;p&gt;(&lt;strong&gt;WARNING&lt;/strong&gt;
The implementation of this operator
is based on an inspection of Blender source code.
It just works but does not reflect
the suggested usage from the design.)&lt;/p&gt;

&lt;p&gt;In this post I will take an experiment
on generating mesh dynamically in Blender.&lt;/p&gt;

&lt;p&gt;As I said in the &lt;a href=&quot;/learnblenderdev-site/2015/04/01/analyze-primitive-cube-add-operator.html&quot;&gt;previous post&lt;/a&gt;
there are two possible approaches to generate mesh data dynamically.
One is to add a new BMesh operator which is similar to &lt;code&gt;create_cube&lt;/code&gt;.
The other is
to construct a &lt;code&gt;Mesh&lt;/code&gt;(defined in the file &lt;code&gt;DNA_mesh_types.h&lt;/code&gt;) first
and apply the BMesh operator &lt;code&gt;mesh_to_bmesh&lt;/code&gt;.
I will try the later one today.&lt;/p&gt;

&lt;p&gt;The major problem of this project is how to construct a &lt;code&gt;Mesh&lt;/code&gt;.
More concretely, you have to search for functions
which can be used as tools to construct a &lt;code&gt;Mesh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are familiar with the &lt;a href=&quot;http://wiki.blender.org/index.php/Dev:2.5/Doc/Blender_Source/Files_structure&quot;&gt;directory structure&lt;/a&gt; of Blender,
you would probably make a correct guess that those &lt;code&gt;Mesh&lt;/code&gt; related functions
should be in &lt;code&gt;blender/source/blender/editors/&lt;/code&gt;(The answer is &lt;code&gt;ED_mesh.h&lt;/code&gt;).
But you still have to spend time on making sure your way of
applying those functions is correct,
that is, you should provide the correct preconditions for every call.&lt;/p&gt;

&lt;p&gt;Instead of the above approach,
I introduce you a way to learn how to construct a &lt;code&gt;Mesh&lt;/code&gt;
by using Blender’s Python API.&lt;/p&gt;

&lt;p&gt;Let us get started.&lt;/p&gt;

&lt;p&gt;I assume you are familiar of how to achieve this using Python API:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meshes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;MyMesh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;faces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_pydata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The most important function is &lt;code&gt;from_pydata&lt;/code&gt;.
This function fills the mesh data and build the topology for a mesh.
You can find the implementation of this function
in file &lt;code&gt;bpy_types.py&lt;/code&gt;(directory &lt;code&gt;blender/release/scripts/modules&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I put an excerpt of its source code below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polygons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;vertices_flat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreach_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;co&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices_flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices_flat&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;edges_flat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreach_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vertices&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges_flat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges_flat&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# this is different in bmesh&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loop_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polygons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loop_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop_index&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop_len&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loop_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop_len&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# if no edges - calculate them&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faces&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calc_edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All functions called above is implemented in C.
By applying tracing techniques I introduced in
&lt;a href=&quot;/learnblenderdev-site/2015/03/20/tips-on-tracing-blender-system.html&quot;&gt;this post&lt;/a&gt;
(Hint: search &lt;code&gt;&quot;add&quot;&lt;/code&gt;, &lt;code&gt;&quot;loop_start&quot;&lt;/code&gt; in the source code.
Be sure to include the double quotes while searching
since we are interested in the reflection code with those words),
we can collect all of the information we need to construct a &lt;code&gt;Mesh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After that, the remains are simple.&lt;/p&gt;

&lt;p&gt;To call a BMesh operator, according our
&lt;a href=&quot;/learnblenderdev-site/2015/04/01/analyze-primitive-cube-add-operator.html&quot;&gt;analysis&lt;/a&gt;
on BMesh system,
you can find the desired operator name and parameters in &lt;code&gt;bmo_opdefines&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also do not forget to link the newly created object to the scene,
and trigger a notification.&lt;/p&gt;

&lt;p&gt;I upload all source code of this experiment
&lt;a href=&quot;https://github.com/thebusytypist/BlenderExtraOperators/tree/master/CreateBMeshFromMesh&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next post I will write some real code on the contouring algorithm.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Apr 2015 00:00:00 +0800</pubDate>
        <link>http://thebusytypist.github.io/learnblenderdev-site/2015/04/05/construct-bmesh-from-mesh.html</link>
        <guid isPermaLink="true">http://thebusytypist.github.io/learnblenderdev-site/2015/04/05/construct-bmesh-from-mesh.html</guid>
        
        <category>blender-coding</category>
        
        <category>operator</category>
        
        
      </item>
    
  </channel>
</rss>
